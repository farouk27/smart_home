
drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00003c82  00003d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000f2  008000f2  00003da8  2**0
                  ALLOC
  3 .stab         00003dbc  00000000  00000000  00003da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c7  00000000  00000000  00007b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000902b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000916b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000092db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000af24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000be0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cfa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d777  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 11 	call	0x2266	; 0x2266 <main>
      8a:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ee       	ldi	r26, 0xE6	; 230
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 ee       	ldi	r24, 0xE6	; 230
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Init>:
 * Description:
 * initialize the BUZZER driver by :
 * set the direction of the buzzer pin.
 */
void Buzzer_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BuzzerPort_ID,BuzzerPin_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	/* set the direction of the buzzer pin as output bin*/
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_ON>:
/*
 * Description :
 * make the BUZZER ON mode
 */
void Buzzer_ON(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzerPort_ID,BuzzerPin_ID,LOGIC_HIGH);/* give the PIN logic high */
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_Off>:
/*
 * Description :
 * make the BUZZER OFF mode
 */
void Buzzer_Off(void)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzerPort_ID,BuzzerPin_ID,LOGIC_LOW); /* give the PIN logic low */
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	67 e0       	ldi	r22, 0x07	; 7
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <GPIO_setupPinDirection+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <GPIO_setupPinDirection+0x8>
     b96:	0f 92       	push	r0
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	6a 83       	std	Y+2, r22	; 0x02
     ba0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	88 30       	cpi	r24, 0x08	; 8
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <GPIO_setupPinDirection+0x1c>
     ba8:	d5 c0       	rjmp	.+426    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <GPIO_setupPinDirection+0x24>
     bb0:	d1 c0       	rjmp	.+418    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3d 83       	std	Y+5, r19	; 0x05
     bba:	2c 83       	std	Y+4, r18	; 0x04
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 05       	cpc	r25, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <GPIO_setupPinDirection+0x3a>
     bc6:	43 c0       	rjmp	.+134    	; 0xc4e <GPIO_setupPinDirection+0xc0>
     bc8:	2c 81       	ldd	r18, Y+4	; 0x04
     bca:	3d 81       	ldd	r19, Y+5	; 0x05
     bcc:	22 30       	cpi	r18, 0x02	; 2
     bce:	31 05       	cpc	r19, r1
     bd0:	2c f4       	brge	.+10     	; 0xbdc <GPIO_setupPinDirection+0x4e>
     bd2:	8c 81       	ldd	r24, Y+4	; 0x04
     bd4:	9d 81       	ldd	r25, Y+5	; 0x05
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <GPIO_setupPinDirection+0x68>
     bda:	bc c0       	rjmp	.+376    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
     bdc:	2c 81       	ldd	r18, Y+4	; 0x04
     bde:	3d 81       	ldd	r19, Y+5	; 0x05
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <GPIO_setupPinDirection+0x5a>
     be6:	5f c0       	rjmp	.+190    	; 0xca6 <GPIO_setupPinDirection+0x118>
     be8:	8c 81       	ldd	r24, Y+4	; 0x04
     bea:	9d 81       	ldd	r25, Y+5	; 0x05
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <GPIO_setupPinDirection+0x66>
     bf2:	85 c0       	rjmp	.+266    	; 0xcfe <GPIO_setupPinDirection+0x170>
     bf4:	af c0       	rjmp	.+350    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bfc:	aa e3       	ldi	r26, 0x3A	; 58
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	ea e3       	ldi	r30, 0x3A	; 58
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0x8c>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0x88>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	98 c0       	rjmp	.+304    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c24:	aa e3       	ldi	r26, 0x3A	; 58
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ea e3       	ldi	r30, 0x3A	; 58
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0xb4>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0xb0>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	83 c0       	rjmp	.+262    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c54:	a7 e3       	ldi	r26, 0x37	; 55
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e7 e3       	ldi	r30, 0x37	; 55
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0xe4>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0xe0>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	6c c0       	rjmp	.+216    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c7c:	a7 e3       	ldi	r26, 0x37	; 55
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e7 e3       	ldi	r30, 0x37	; 55
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x10c>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x108>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	57 c0       	rjmp	.+174    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     cac:	a4 e3       	ldi	r26, 0x34	; 52
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e4 e3       	ldi	r30, 0x34	; 52
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x13c>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x138>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	40 c0       	rjmp	.+128    	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     cd4:	a4 e3       	ldi	r26, 0x34	; 52
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e4 e3       	ldi	r30, 0x34	; 52
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x164>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x160>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	2b c0       	rjmp	.+86     	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	a1 f4       	brne	.+40     	; 0xd2c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d04:	a1 e3       	ldi	r26, 0x31	; 49
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e1 e3       	ldi	r30, 0x31	; 49
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <GPIO_setupPinDirection+0x194>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <GPIO_setupPinDirection+0x190>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	14 c0       	rjmp	.+40     	; 0xd54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d2c:	a1 e3       	ldi	r26, 0x31	; 49
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e1 e3       	ldi	r30, 0x31	; 49
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <GPIO_setupPinDirection+0x1bc>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <GPIO_setupPinDirection+0x1b8>
     d4e:	80 95       	com	r24
     d50:	84 23       	and	r24, r20
     d52:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <GPIO_writePin+0x6>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <GPIO_writePin+0x8>
     d6c:	0f 92       	push	r0
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	6a 83       	std	Y+2, r22	; 0x02
     d76:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	88 30       	cpi	r24, 0x08	; 8
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <GPIO_writePin+0x1c>
     d7e:	d5 c0       	rjmp	.+426    	; 0xf2a <GPIO_writePin+0x1c6>
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	08 f0       	brcs	.+2      	; 0xd88 <GPIO_writePin+0x24>
     d86:	d1 c0       	rjmp	.+418    	; 0xf2a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	3d 83       	std	Y+5, r19	; 0x05
     d90:	2c 83       	std	Y+4, r18	; 0x04
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	91 05       	cpc	r25, r1
     d9a:	09 f4       	brne	.+2      	; 0xd9e <GPIO_writePin+0x3a>
     d9c:	43 c0       	rjmp	.+134    	; 0xe24 <GPIO_writePin+0xc0>
     d9e:	2c 81       	ldd	r18, Y+4	; 0x04
     da0:	3d 81       	ldd	r19, Y+5	; 0x05
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	2c f4       	brge	.+10     	; 0xdb2 <GPIO_writePin+0x4e>
     da8:	8c 81       	ldd	r24, Y+4	; 0x04
     daa:	9d 81       	ldd	r25, Y+5	; 0x05
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	71 f0       	breq	.+28     	; 0xdcc <GPIO_writePin+0x68>
     db0:	bc c0       	rjmp	.+376    	; 0xf2a <GPIO_writePin+0x1c6>
     db2:	2c 81       	ldd	r18, Y+4	; 0x04
     db4:	3d 81       	ldd	r19, Y+5	; 0x05
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <GPIO_writePin+0x5a>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <GPIO_writePin+0x118>
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	9d 81       	ldd	r25, Y+5	; 0x05
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	91 05       	cpc	r25, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <GPIO_writePin+0x66>
     dc8:	85 c0       	rjmp	.+266    	; 0xed4 <GPIO_writePin+0x170>
     dca:	af c0       	rjmp	.+350    	; 0xf2a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     dd2:	ab e3       	ldi	r26, 0x3B	; 59
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e3       	ldi	r30, 0x3B	; 59
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_writePin+0x8c>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_writePin+0x88>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	98 c0       	rjmp	.+304    	; 0xf2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     dfa:	ab e3       	ldi	r26, 0x3B	; 59
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e3       	ldi	r30, 0x3B	; 59
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_writePin+0xb4>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_writePin+0xb0>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	83 c0       	rjmp	.+262    	; 0xf2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     e2a:	a8 e3       	ldi	r26, 0x38	; 56
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 e3       	ldi	r30, 0x38	; 56
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0xe4>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0xe0>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	6c c0       	rjmp	.+216    	; 0xf2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e52:	a8 e3       	ldi	r26, 0x38	; 56
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e8 e3       	ldi	r30, 0x38	; 56
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_writePin+0x10c>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_writePin+0x108>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	57 c0       	rjmp	.+174    	; 0xf2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e82:	a5 e3       	ldi	r26, 0x35	; 53
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e3       	ldi	r30, 0x35	; 53
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0x13c>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0x138>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	40 c0       	rjmp	.+128    	; 0xf2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     eaa:	a5 e3       	ldi	r26, 0x35	; 53
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e3       	ldi	r30, 0x35	; 53
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x164>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x160>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	2b c0       	rjmp	.+86     	; 0xf2a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	a1 f4       	brne	.+40     	; 0xf02 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     eda:	a2 e3       	ldi	r26, 0x32	; 50
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e3       	ldi	r30, 0x32	; 50
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <GPIO_writePin+0x194>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <GPIO_writePin+0x190>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f02:	a2 e3       	ldi	r26, 0x32	; 50
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e2 e3       	ldi	r30, 0x32	; 50
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_writePin+0x1bc>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_writePin+0x1b8>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <GPIO_readPin+0x6>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <GPIO_readPin+0x8>
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	8a 83       	std	Y+2, r24	; 0x02
     f4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f4c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <GPIO_readPin+0x1c>
     f54:	84 c0       	rjmp	.+264    	; 0x105e <GPIO_readPin+0x124>
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <GPIO_readPin+0x24>
     f5c:	80 c0       	rjmp	.+256    	; 0x105e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3d 83       	std	Y+5, r19	; 0x05
     f66:	2c 83       	std	Y+4, r18	; 0x04
     f68:	4c 81       	ldd	r20, Y+4	; 0x04
     f6a:	5d 81       	ldd	r21, Y+5	; 0x05
     f6c:	41 30       	cpi	r20, 0x01	; 1
     f6e:	51 05       	cpc	r21, r1
     f70:	79 f1       	breq	.+94     	; 0xfd0 <GPIO_readPin+0x96>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	91 05       	cpc	r25, r1
     f7a:	34 f4       	brge	.+12     	; 0xf88 <GPIO_readPin+0x4e>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	21 15       	cp	r18, r1
     f82:	31 05       	cpc	r19, r1
     f84:	69 f0       	breq	.+26     	; 0xfa0 <GPIO_readPin+0x66>
     f86:	6b c0       	rjmp	.+214    	; 0x105e <GPIO_readPin+0x124>
     f88:	4c 81       	ldd	r20, Y+4	; 0x04
     f8a:	5d 81       	ldd	r21, Y+5	; 0x05
     f8c:	42 30       	cpi	r20, 0x02	; 2
     f8e:	51 05       	cpc	r21, r1
     f90:	b9 f1       	breq	.+110    	; 0x1000 <GPIO_readPin+0xc6>
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <GPIO_readPin+0x64>
     f9c:	49 c0       	rjmp	.+146    	; 0x1030 <GPIO_readPin+0xf6>
     f9e:	5f c0       	rjmp	.+190    	; 0x105e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     fa0:	e9 e3       	ldi	r30, 0x39	; 57
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_readPin+0x7e>
     fb4:	55 95       	asr	r21
     fb6:	47 95       	ror	r20
     fb8:	8a 95       	dec	r24
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_readPin+0x7a>
     fbc:	ca 01       	movw	r24, r20
     fbe:	81 70       	andi	r24, 0x01	; 1
     fc0:	90 70       	andi	r25, 0x00	; 0
     fc2:	88 23       	and	r24, r24
     fc4:	19 f0       	breq	.+6      	; 0xfcc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	49 c0       	rjmp	.+146    	; 0x105e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fcc:	19 82       	std	Y+1, r1	; 0x01
     fce:	47 c0       	rjmp	.+142    	; 0x105e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     fd0:	e6 e3       	ldi	r30, 0x36	; 54
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a9 01       	movw	r20, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <GPIO_readPin+0xae>
     fe4:	55 95       	asr	r21
     fe6:	47 95       	ror	r20
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <GPIO_readPin+0xaa>
     fec:	ca 01       	movw	r24, r20
     fee:	81 70       	andi	r24, 0x01	; 1
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	88 23       	and	r24, r24
     ff4:	19 f0       	breq	.+6      	; 0xffc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	31 c0       	rjmp	.+98     	; 0x105e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     ffc:	19 82       	std	Y+1, r1	; 0x01
     ffe:	2f c0       	rjmp	.+94     	; 0x105e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1000:	e3 e3       	ldi	r30, 0x33	; 51
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <GPIO_readPin+0xde>
    1014:	55 95       	asr	r21
    1016:	47 95       	ror	r20
    1018:	8a 95       	dec	r24
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <GPIO_readPin+0xda>
    101c:	ca 01       	movw	r24, r20
    101e:	81 70       	andi	r24, 0x01	; 1
    1020:	90 70       	andi	r25, 0x00	; 0
    1022:	88 23       	and	r24, r24
    1024:	19 f0       	breq	.+6      	; 0x102c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	19 c0       	rjmp	.+50     	; 0x105e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    102c:	19 82       	std	Y+1, r1	; 0x01
    102e:	17 c0       	rjmp	.+46     	; 0x105e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1030:	e0 e3       	ldi	r30, 0x30	; 48
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a9 01       	movw	r20, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_readPin+0x10e>
    1044:	55 95       	asr	r21
    1046:	47 95       	ror	r20
    1048:	8a 95       	dec	r24
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_readPin+0x10a>
    104c:	ca 01       	movw	r24, r20
    104e:	81 70       	andi	r24, 0x01	; 1
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	88 23       	and	r24, r24
    1054:	19 f0       	breq	.+6      	; 0x105c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	01 c0       	rjmp	.+2      	; 0x105e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    105c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <GPIO_setupPortDirection+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <GPIO_setupPortDirection+0x8>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	90 f5       	brcc	.+100    	; 0x10ea <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3c 83       	std	Y+4, r19	; 0x04
    108e:	2b 83       	std	Y+3, r18	; 0x03
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	d1 f0       	breq	.+52     	; 0x10ce <GPIO_setupPortDirection+0x5e>
    109a:	2b 81       	ldd	r18, Y+3	; 0x03
    109c:	3c 81       	ldd	r19, Y+4	; 0x04
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	2c f4       	brge	.+10     	; 0x10ae <GPIO_setupPortDirection+0x3e>
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <GPIO_setupPortDirection+0x54>
    10ac:	1e c0       	rjmp	.+60     	; 0x10ea <GPIO_setupPortDirection+0x7a>
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <GPIO_setupPortDirection+0x68>
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	91 05       	cpc	r25, r1
    10c0:	81 f0       	breq	.+32     	; 0x10e2 <GPIO_setupPortDirection+0x72>
    10c2:	13 c0       	rjmp	.+38     	; 0x10ea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10c4:	ea e3       	ldi	r30, 0x3A	; 58
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
    10cc:	0e c0       	rjmp	.+28     	; 0x10ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10ce:	e7 e3       	ldi	r30, 0x37	; 55
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10d8:	e4 e3       	ldi	r30, 0x34	; 52
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10e2:	e1 e3       	ldi	r30, 0x31	; 49
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <GPIO_writePort+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <GPIO_writePort+0x8>
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	90 f5       	brcc	.+100    	; 0x1172 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3c 83       	std	Y+4, r19	; 0x04
    1116:	2b 83       	std	Y+3, r18	; 0x03
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	91 05       	cpc	r25, r1
    1120:	d1 f0       	breq	.+52     	; 0x1156 <GPIO_writePort+0x5e>
    1122:	2b 81       	ldd	r18, Y+3	; 0x03
    1124:	3c 81       	ldd	r19, Y+4	; 0x04
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	2c f4       	brge	.+10     	; 0x1136 <GPIO_writePort+0x3e>
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	61 f0       	breq	.+24     	; 0x114c <GPIO_writePort+0x54>
    1134:	1e c0       	rjmp	.+60     	; 0x1172 <GPIO_writePort+0x7a>
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	81 f0       	breq	.+32     	; 0x1160 <GPIO_writePort+0x68>
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	91 05       	cpc	r25, r1
    1148:	81 f0       	breq	.+32     	; 0x116a <GPIO_writePort+0x72>
    114a:	13 c0       	rjmp	.+38     	; 0x1172 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1156:	e8 e3       	ldi	r30, 0x38	; 56
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1160:	e5 e3       	ldi	r30, 0x35	; 53
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    116a:	e2 e3       	ldi	r30, 0x32	; 50
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
			break;
		}
	}
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_readPort+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_readPort+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    118e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	90 f5       	brcc	.+100    	; 0x11fa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <GPIO_readPort+0x5e>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <GPIO_readPort+0x3e>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <GPIO_readPort+0x54>
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <GPIO_readPort+0x7a>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <GPIO_readPort+0x68>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <GPIO_readPort+0x72>
    11d2:	13 c0       	rjmp	.+38     	; 0x11fa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    11d4:	e9 e3       	ldi	r30, 0x39	; 57
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    11de:	e6 e3       	ldi	r30, 0x36	; 54
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11e8:	e3 e3       	ldi	r30, 0x33	; 51
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11f2:	e0 e3       	ldi	r30, 0x30	; 48
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <KEYPAD_get_Value>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_get_Value(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <KEYPAD_get_Value+0x6>
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1216:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1218:	1b 82       	std	Y+3, r1	; 0x03
    121a:	43 c0       	rjmp	.+134    	; 0x12a2 <KEYPAD_get_Value+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	98 2f       	mov	r25, r24
    1228:	9c 5f       	subi	r25, 0xFC	; 252
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	69 2f       	mov	r22, r25
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9c 01       	movw	r18, r24
    123c:	2c 5f       	subi	r18, 0xFC	; 252
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <KEYPAD_get_Value+0x40>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	2a 95       	dec	r18
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <KEYPAD_get_Value+0x3c>
    124e:	80 95       	com	r24
    1250:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	69 81       	ldd	r22, Y+1	; 0x01
    1256:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    125a:	1a 82       	std	Y+2, r1	; 0x02
    125c:	1c c0       	rjmp	.+56     	; 0x1296 <KEYPAD_get_Value+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	6a 81       	ldd	r22, Y+2	; 0x02
    1262:	0e 94 9d 07 	call	0xf3a	; 0xf3a <GPIO_readPin>
    1266:	88 23       	and	r24, r24
    1268:	99 f4       	brne	.+38     	; 0x1290 <KEYPAD_get_Value+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	98 2f       	mov	r25, r24
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	89 0f       	add	r24, r25
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	0e 94 56 09 	call	0x12ac	; 0x12ac <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	08 f3       	brcs	.-62     	; 0x125e <KEYPAD_get_Value+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <KEYPAD_get_Value+0xa0>
    12a8:	b9 cf       	rjmp	.-142    	; 0x121c <KEYPAD_get_Value+0x12>
    12aa:	b6 cf       	rjmp	.-148    	; 0x1218 <KEYPAD_get_Value+0xe>

000012ac <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    12ba:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	88 30       	cpi	r24, 0x08	; 8
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    12d0:	70 c0       	rjmp	.+224    	; 0x13b2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	29 30       	cpi	r18, 0x09	; 9
    12d8:	31 05       	cpc	r19, r1
    12da:	5c f5       	brge	.+86     	; 0x1332 <KEYPAD_4x4_adjustKeyNumber+0x86>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	91 05       	cpc	r25, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    12e6:	59 c0       	rjmp	.+178    	; 0x139a <KEYPAD_4x4_adjustKeyNumber+0xee>
    12e8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ea:	3c 81       	ldd	r19, Y+4	; 0x04
    12ec:	25 30       	cpi	r18, 0x05	; 5
    12ee:	31 05       	cpc	r19, r1
    12f0:	9c f4       	brge	.+38     	; 0x1318 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	91 05       	cpc	r25, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <KEYPAD_4x4_adjustKeyNumber+0x52>
    12fc:	48 c0       	rjmp	.+144    	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	23 30       	cpi	r18, 0x03	; 3
    1304:	31 05       	cpc	r19, r1
    1306:	0c f0       	brlt	.+2      	; 0x130a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1308:	45 c0       	rjmp	.+138    	; 0x1394 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1314:	39 c0       	rjmp	.+114    	; 0x1388 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1316:	67 c0       	rjmp	.+206    	; 0x13e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1318:	2b 81       	ldd	r18, Y+3	; 0x03
    131a:	3c 81       	ldd	r19, Y+4	; 0x04
    131c:	26 30       	cpi	r18, 0x06	; 6
    131e:	31 05       	cpc	r19, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1322:	41 c0       	rjmp	.+130    	; 0x13a6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	87 30       	cpi	r24, 0x07	; 7
    132a:	91 05       	cpc	r25, r1
    132c:	0c f0       	brlt	.+2      	; 0x1330 <KEYPAD_4x4_adjustKeyNumber+0x84>
    132e:	3e c0       	rjmp	.+124    	; 0x13ac <KEYPAD_4x4_adjustKeyNumber+0x100>
    1330:	37 c0       	rjmp	.+110    	; 0x13a0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	2c 30       	cpi	r18, 0x0C	; 12
    1338:	31 05       	cpc	r19, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <KEYPAD_4x4_adjustKeyNumber+0x92>
    133c:	46 c0       	rjmp	.+140    	; 0x13ca <KEYPAD_4x4_adjustKeyNumber+0x11e>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	8d 30       	cpi	r24, 0x0D	; 13
    1344:	91 05       	cpc	r25, r1
    1346:	5c f4       	brge	.+22     	; 0x135e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	2a 30       	cpi	r18, 0x0A	; 10
    134e:	31 05       	cpc	r19, r1
    1350:	b1 f1       	breq	.+108    	; 0x13be <KEYPAD_4x4_adjustKeyNumber+0x112>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	8b 30       	cpi	r24, 0x0B	; 11
    1358:	91 05       	cpc	r25, r1
    135a:	a4 f5       	brge	.+104    	; 0x13c4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    135c:	2d c0       	rjmp	.+90     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	2e 30       	cpi	r18, 0x0E	; 14
    1364:	31 05       	cpc	r19, r1
    1366:	b9 f1       	breq	.+110    	; 0x13d6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	8e 30       	cpi	r24, 0x0E	; 14
    136e:	91 05       	cpc	r25, r1
    1370:	7c f1       	brlt	.+94     	; 0x13d0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	2f 30       	cpi	r18, 0x0F	; 15
    1378:	31 05       	cpc	r19, r1
    137a:	79 f1       	breq	.+94     	; 0x13da <KEYPAD_4x4_adjustKeyNumber+0x12e>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	80 31       	cpi	r24, 0x10	; 16
    1382:	91 05       	cpc	r25, r1
    1384:	69 f1       	breq	.+90     	; 0x13e0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1386:	2f c0       	rjmp	.+94     	; 0x13e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1388:	87 e0       	ldi	r24, 0x07	; 7
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	2e c0       	rjmp	.+92     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    138e:	88 e0       	ldi	r24, 0x08	; 8
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	2b c0       	rjmp	.+86     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1394:	89 e0       	ldi	r24, 0x09	; 9
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	28 c0       	rjmp	.+80     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    139a:	85 e2       	ldi	r24, 0x25	; 37
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	25 c0       	rjmp	.+74     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	22 c0       	rjmp	.+68     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    13a6:	85 e0       	ldi	r24, 0x05	; 5
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	1f c0       	rjmp	.+62     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    13ac:	86 e0       	ldi	r24, 0x06	; 6
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	1c c0       	rjmp	.+56     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    13b2:	8a e2       	ldi	r24, 0x2A	; 42
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	19 c0       	rjmp	.+50     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	13 c0       	rjmp	.+38     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	10 c0       	rjmp	.+32     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    13ca:	8d e2       	ldi	r24, 0x2D	; 45
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	0d c0       	rjmp	.+26     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    13d0:	8d e0       	ldi	r24, 0x0D	; 13
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	0a c0       	rjmp	.+20     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    13da:	8d e3       	ldi	r24, 0x3D	; 61
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    13e0:	8b e2       	ldi	r24, 0x2B	; 43
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
} 
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	66 e0       	ldi	r22, 0x06	; 6
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	6f ef       	ldi	r22, 0xFF	; 255
    1424:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1428:	88 e3       	ldi	r24, 0x38	; 56
    142a:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    142e:	8c e0       	ldi	r24, 0x0C	; 12
    1430:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_sendCommand>
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	e9 97       	sbiw	r28, 0x39	; 57
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	66 e0       	ldi	r22, 0x06	; 6
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a0 e8       	ldi	r26, 0x80	; 128
    1470:	bf e3       	ldi	r27, 0x3F	; 63
    1472:	8d ab       	std	Y+53, r24	; 0x35
    1474:	9e ab       	std	Y+54, r25	; 0x36
    1476:	af ab       	std	Y+55, r26	; 0x37
    1478:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147a:	6d a9       	ldd	r22, Y+53	; 0x35
    147c:	7e a9       	ldd	r23, Y+54	; 0x36
    147e:	8f a9       	ldd	r24, Y+55	; 0x37
    1480:	98 ad       	ldd	r25, Y+56	; 0x38
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	4a e7       	ldi	r20, 0x7A	; 122
    1488:	53 e4       	ldi	r21, 0x43	; 67
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	89 ab       	std	Y+49, r24	; 0x31
    1494:	9a ab       	std	Y+50, r25	; 0x32
    1496:	ab ab       	std	Y+51, r26	; 0x33
    1498:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    149a:	69 a9       	ldd	r22, Y+49	; 0x31
    149c:	7a a9       	ldd	r23, Y+50	; 0x32
    149e:	8b a9       	ldd	r24, Y+51	; 0x33
    14a0:	9c a9       	ldd	r25, Y+52	; 0x34
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e8       	ldi	r20, 0x80	; 128
    14a8:	5f e3       	ldi	r21, 0x3F	; 63
    14aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	2c f4       	brge	.+10     	; 0x14bc <LCD_sendCommand+0x7c>
		__ticks = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	98 ab       	std	Y+48, r25	; 0x30
    14b8:	8f a7       	std	Y+47, r24	; 0x2f
    14ba:	3f c0       	rjmp	.+126    	; 0x153a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    14bc:	69 a9       	ldd	r22, Y+49	; 0x31
    14be:	7a a9       	ldd	r23, Y+50	; 0x32
    14c0:	8b a9       	ldd	r24, Y+51	; 0x33
    14c2:	9c a9       	ldd	r25, Y+52	; 0x34
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	4f e7       	ldi	r20, 0x7F	; 127
    14ca:	57 e4       	ldi	r21, 0x47	; 71
    14cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d0:	18 16       	cp	r1, r24
    14d2:	4c f5       	brge	.+82     	; 0x1526 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d4:	6d a9       	ldd	r22, Y+53	; 0x35
    14d6:	7e a9       	ldd	r23, Y+54	; 0x36
    14d8:	8f a9       	ldd	r24, Y+55	; 0x37
    14da:	98 ad       	ldd	r25, Y+56	; 0x38
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e2       	ldi	r20, 0x20	; 32
    14e2:	51 e4       	ldi	r21, 0x41	; 65
    14e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	98 ab       	std	Y+48, r25	; 0x30
    14fa:	8f a7       	std	Y+47, r24	; 0x2f
    14fc:	0f c0       	rjmp	.+30     	; 0x151c <LCD_sendCommand+0xdc>
    14fe:	89 e1       	ldi	r24, 0x19	; 25
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9e a7       	std	Y+46, r25	; 0x2e
    1504:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1506:	8d a5       	ldd	r24, Y+45	; 0x2d
    1508:	9e a5       	ldd	r25, Y+46	; 0x2e
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <LCD_sendCommand+0xca>
    150e:	9e a7       	std	Y+46, r25	; 0x2e
    1510:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1512:	8f a5       	ldd	r24, Y+47	; 0x2f
    1514:	98 a9       	ldd	r25, Y+48	; 0x30
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	98 ab       	std	Y+48, r25	; 0x30
    151a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151c:	8f a5       	ldd	r24, Y+47	; 0x2f
    151e:	98 a9       	ldd	r25, Y+48	; 0x30
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	69 f7       	brne	.-38     	; 0x14fe <LCD_sendCommand+0xbe>
    1524:	14 c0       	rjmp	.+40     	; 0x154e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1526:	69 a9       	ldd	r22, Y+49	; 0x31
    1528:	7a a9       	ldd	r23, Y+50	; 0x32
    152a:	8b a9       	ldd	r24, Y+51	; 0x33
    152c:	9c a9       	ldd	r25, Y+52	; 0x34
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	98 ab       	std	Y+48, r25	; 0x30
    1538:	8f a7       	std	Y+47, r24	; 0x2f
    153a:	8f a5       	ldd	r24, Y+47	; 0x2f
    153c:	98 a9       	ldd	r25, Y+48	; 0x30
    153e:	9c a7       	std	Y+44, r25	; 0x2c
    1540:	8b a7       	std	Y+43, r24	; 0x2b
    1542:	8b a5       	ldd	r24, Y+43	; 0x2b
    1544:	9c a5       	ldd	r25, Y+44	; 0x2c
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <LCD_sendCommand+0x106>
    154a:	9c a7       	std	Y+44, r25	; 0x2c
    154c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e8       	ldi	r26, 0x80	; 128
    155e:	bf e3       	ldi	r27, 0x3F	; 63
    1560:	8f a3       	std	Y+39, r24	; 0x27
    1562:	98 a7       	std	Y+40, r25	; 0x28
    1564:	a9 a7       	std	Y+41, r26	; 0x29
    1566:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1568:	6f a1       	ldd	r22, Y+39	; 0x27
    156a:	78 a5       	ldd	r23, Y+40	; 0x28
    156c:	89 a5       	ldd	r24, Y+41	; 0x29
    156e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4a e7       	ldi	r20, 0x7A	; 122
    1576:	53 e4       	ldi	r21, 0x43	; 67
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8b a3       	std	Y+35, r24	; 0x23
    1582:	9c a3       	std	Y+36, r25	; 0x24
    1584:	ad a3       	std	Y+37, r26	; 0x25
    1586:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1588:	6b a1       	ldd	r22, Y+35	; 0x23
    158a:	7c a1       	ldd	r23, Y+36	; 0x24
    158c:	8d a1       	ldd	r24, Y+37	; 0x25
    158e:	9e a1       	ldd	r25, Y+38	; 0x26
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	2c f4       	brge	.+10     	; 0x15aa <LCD_sendCommand+0x16a>
		__ticks = 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9a a3       	std	Y+34, r25	; 0x22
    15a6:	89 a3       	std	Y+33, r24	; 0x21
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    15aa:	6b a1       	ldd	r22, Y+35	; 0x23
    15ac:	7c a1       	ldd	r23, Y+36	; 0x24
    15ae:	8d a1       	ldd	r24, Y+37	; 0x25
    15b0:	9e a1       	ldd	r25, Y+38	; 0x26
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f e7       	ldi	r20, 0x7F	; 127
    15b8:	57 e4       	ldi	r21, 0x47	; 71
    15ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15be:	18 16       	cp	r1, r24
    15c0:	4c f5       	brge	.+82     	; 0x1614 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c2:	6f a1       	ldd	r22, Y+39	; 0x27
    15c4:	78 a5       	ldd	r23, Y+40	; 0x28
    15c6:	89 a5       	ldd	r24, Y+41	; 0x29
    15c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9a a3       	std	Y+34, r25	; 0x22
    15e8:	89 a3       	std	Y+33, r24	; 0x21
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <LCD_sendCommand+0x1ca>
    15ec:	89 e1       	ldi	r24, 0x19	; 25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	98 a3       	std	Y+32, r25	; 0x20
    15f2:	8f 8f       	std	Y+31, r24	; 0x1f
    15f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15f6:	98 a1       	ldd	r25, Y+32	; 0x20
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <LCD_sendCommand+0x1b8>
    15fc:	98 a3       	std	Y+32, r25	; 0x20
    15fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	89 a1       	ldd	r24, Y+33	; 0x21
    1602:	9a a1       	ldd	r25, Y+34	; 0x22
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9a a3       	std	Y+34, r25	; 0x22
    1608:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	89 a1       	ldd	r24, Y+33	; 0x21
    160c:	9a a1       	ldd	r25, Y+34	; 0x22
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f7       	brne	.-38     	; 0x15ec <LCD_sendCommand+0x1ac>
    1612:	14 c0       	rjmp	.+40     	; 0x163c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	6b a1       	ldd	r22, Y+35	; 0x23
    1616:	7c a1       	ldd	r23, Y+36	; 0x24
    1618:	8d a1       	ldd	r24, Y+37	; 0x25
    161a:	9e a1       	ldd	r25, Y+38	; 0x26
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9a a3       	std	Y+34, r25	; 0x22
    1626:	89 a3       	std	Y+33, r24	; 0x21
    1628:	89 a1       	ldd	r24, Y+33	; 0x21
    162a:	9a a1       	ldd	r25, Y+34	; 0x22
    162c:	9e 8f       	std	Y+30, r25	; 0x1e
    162e:	8d 8f       	std	Y+29, r24	; 0x1d
    1630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1632:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_sendCommand+0x1f4>
    1638:	9e 8f       	std	Y+30, r25	; 0x1e
    163a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	69 ad       	ldd	r22, Y+57	; 0x39
    1640:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <GPIO_writePort>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e8       	ldi	r26, 0x80	; 128
    164a:	bf e3       	ldi	r27, 0x3F	; 63
    164c:	89 8f       	std	Y+25, r24	; 0x19
    164e:	9a 8f       	std	Y+26, r25	; 0x1a
    1650:	ab 8f       	std	Y+27, r26	; 0x1b
    1652:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	69 8d       	ldd	r22, Y+25	; 0x19
    1656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a e7       	ldi	r20, 0x7A	; 122
    1662:	53 e4       	ldi	r21, 0x43	; 67
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8d 8b       	std	Y+21, r24	; 0x15
    166e:	9e 8b       	std	Y+22, r25	; 0x16
    1670:	af 8b       	std	Y+23, r26	; 0x17
    1672:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1674:	6d 89       	ldd	r22, Y+21	; 0x15
    1676:	7e 89       	ldd	r23, Y+22	; 0x16
    1678:	8f 89       	ldd	r24, Y+23	; 0x17
    167a:	98 8d       	ldd	r25, Y+24	; 0x18
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1688:	88 23       	and	r24, r24
    168a:	2c f4       	brge	.+10     	; 0x1696 <LCD_sendCommand+0x256>
		__ticks = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c 8b       	std	Y+20, r25	; 0x14
    1692:	8b 8b       	std	Y+19, r24	; 0x13
    1694:	3f c0       	rjmp	.+126    	; 0x1714 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1696:	6d 89       	ldd	r22, Y+21	; 0x15
    1698:	7e 89       	ldd	r23, Y+22	; 0x16
    169a:	8f 89       	ldd	r24, Y+23	; 0x17
    169c:	98 8d       	ldd	r25, Y+24	; 0x18
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	57 e4       	ldi	r21, 0x47	; 71
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	4c f5       	brge	.+82     	; 0x1700 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	69 8d       	ldd	r22, Y+25	; 0x19
    16b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9c 8b       	std	Y+20, r25	; 0x14
    16d4:	8b 8b       	std	Y+19, r24	; 0x13
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <LCD_sendCommand+0x2b6>
    16d8:	89 e1       	ldi	r24, 0x19	; 25
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9a 8b       	std	Y+18, r25	; 0x12
    16de:	89 8b       	std	Y+17, r24	; 0x11
    16e0:	89 89       	ldd	r24, Y+17	; 0x11
    16e2:	9a 89       	ldd	r25, Y+18	; 0x12
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCD_sendCommand+0x2a4>
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	8b 89       	ldd	r24, Y+19	; 0x13
    16ee:	9c 89       	ldd	r25, Y+20	; 0x14
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9c 8b       	std	Y+20, r25	; 0x14
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	8b 89       	ldd	r24, Y+19	; 0x13
    16f8:	9c 89       	ldd	r25, Y+20	; 0x14
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <LCD_sendCommand+0x298>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1700:	6d 89       	ldd	r22, Y+21	; 0x15
    1702:	7e 89       	ldd	r23, Y+22	; 0x16
    1704:	8f 89       	ldd	r24, Y+23	; 0x17
    1706:	98 8d       	ldd	r25, Y+24	; 0x18
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9c 8b       	std	Y+20, r25	; 0x14
    1712:	8b 8b       	std	Y+19, r24	; 0x13
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	98 8b       	std	Y+16, r25	; 0x10
    171a:	8f 87       	std	Y+15, r24	; 0x0f
    171c:	8f 85       	ldd	r24, Y+15	; 0x0f
    171e:	98 89       	ldd	r25, Y+16	; 0x10
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_sendCommand+0x2e0>
    1724:	98 8b       	std	Y+16, r25	; 0x10
    1726:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e8       	ldi	r26, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	8b 87       	std	Y+11, r24	; 0x0b
    173c:	9c 87       	std	Y+12, r25	; 0x0c
    173e:	ad 87       	std	Y+13, r26	; 0x0d
    1740:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a e7       	ldi	r20, 0x7A	; 122
    1750:	53 e4       	ldi	r21, 0x43	; 67
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	8f 83       	std	Y+7, r24	; 0x07
    175c:	98 87       	std	Y+8, r25	; 0x08
    175e:	a9 87       	std	Y+9, r26	; 0x09
    1760:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1762:	6f 81       	ldd	r22, Y+7	; 0x07
    1764:	78 85       	ldd	r23, Y+8	; 0x08
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <LCD_sendCommand+0x344>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1784:	6f 81       	ldd	r22, Y+7	; 0x07
    1786:	78 85       	ldd	r23, Y+8	; 0x08
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	6b 85       	ldd	r22, Y+11	; 0x0b
    179e:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <LCD_sendCommand+0x3a4>
    17c6:	89 e1       	ldi	r24, 0x19	; 25
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_sendCommand+0x392>
    17d6:	9c 83       	std	Y+4, r25	; 0x04
    17d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <LCD_sendCommand+0x386>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	6f 81       	ldd	r22, Y+7	; 0x07
    17f0:	78 85       	ldd	r23, Y+8	; 0x08
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_sendCommand+0x3ce>
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1816:	e9 96       	adiw	r28, 0x39	; 57
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	e9 97       	sbiw	r28, 0x39	; 57
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	66 e0       	ldi	r22, 0x06	; 6
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e8       	ldi	r26, 0x80	; 128
    1858:	bf e3       	ldi	r27, 0x3F	; 63
    185a:	8d ab       	std	Y+53, r24	; 0x35
    185c:	9e ab       	std	Y+54, r25	; 0x36
    185e:	af ab       	std	Y+55, r26	; 0x37
    1860:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	6d a9       	ldd	r22, Y+53	; 0x35
    1864:	7e a9       	ldd	r23, Y+54	; 0x36
    1866:	8f a9       	ldd	r24, Y+55	; 0x37
    1868:	98 ad       	ldd	r25, Y+56	; 0x38
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a e7       	ldi	r20, 0x7A	; 122
    1870:	53 e4       	ldi	r21, 0x43	; 67
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	89 ab       	std	Y+49, r24	; 0x31
    187c:	9a ab       	std	Y+50, r25	; 0x32
    187e:	ab ab       	std	Y+51, r26	; 0x33
    1880:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1882:	69 a9       	ldd	r22, Y+49	; 0x31
    1884:	7a a9       	ldd	r23, Y+50	; 0x32
    1886:	8b a9       	ldd	r24, Y+51	; 0x33
    1888:	9c a9       	ldd	r25, Y+52	; 0x34
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	98 ab       	std	Y+48, r25	; 0x30
    18a0:	8f a7       	std	Y+47, r24	; 0x2f
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    18a4:	69 a9       	ldd	r22, Y+49	; 0x31
    18a6:	7a a9       	ldd	r23, Y+50	; 0x32
    18a8:	8b a9       	ldd	r24, Y+51	; 0x33
    18aa:	9c a9       	ldd	r25, Y+52	; 0x34
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	6d a9       	ldd	r22, Y+53	; 0x35
    18be:	7e a9       	ldd	r23, Y+54	; 0x36
    18c0:	8f a9       	ldd	r24, Y+55	; 0x37
    18c2:	98 ad       	ldd	r25, Y+56	; 0x38
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	98 ab       	std	Y+48, r25	; 0x30
    18e2:	8f a7       	std	Y+47, r24	; 0x2f
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <LCD_displayCharacter+0xdc>
    18e6:	89 e1       	ldi	r24, 0x19	; 25
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9e a7       	std	Y+46, r25	; 0x2e
    18ec:	8d a7       	std	Y+45, r24	; 0x2d
    18ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    18f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_displayCharacter+0xca>
    18f6:	9e a7       	std	Y+46, r25	; 0x2e
    18f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fc:	98 a9       	ldd	r25, Y+48	; 0x30
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8f a5       	ldd	r24, Y+47	; 0x2f
    1906:	98 a9       	ldd	r25, Y+48	; 0x30
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <LCD_displayCharacter+0xbe>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	69 a9       	ldd	r22, Y+49	; 0x31
    1910:	7a a9       	ldd	r23, Y+50	; 0x32
    1912:	8b a9       	ldd	r24, Y+51	; 0x33
    1914:	9c a9       	ldd	r25, Y+52	; 0x34
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	98 ab       	std	Y+48, r25	; 0x30
    1920:	8f a7       	std	Y+47, r24	; 0x2f
    1922:	8f a5       	ldd	r24, Y+47	; 0x2f
    1924:	98 a9       	ldd	r25, Y+48	; 0x30
    1926:	9c a7       	std	Y+44, r25	; 0x2c
    1928:	8b a7       	std	Y+43, r24	; 0x2b
    192a:	8b a5       	ldd	r24, Y+43	; 0x2b
    192c:	9c a5       	ldd	r25, Y+44	; 0x2c
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_displayCharacter+0x106>
    1932:	9c a7       	std	Y+44, r25	; 0x2c
    1934:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	bf e3       	ldi	r27, 0x3F	; 63
    1948:	8f a3       	std	Y+39, r24	; 0x27
    194a:	98 a7       	std	Y+40, r25	; 0x28
    194c:	a9 a7       	std	Y+41, r26	; 0x29
    194e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6f a1       	ldd	r22, Y+39	; 0x27
    1952:	78 a5       	ldd	r23, Y+40	; 0x28
    1954:	89 a5       	ldd	r24, Y+41	; 0x29
    1956:	9a a5       	ldd	r25, Y+42	; 0x2a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	53 e4       	ldi	r21, 0x43	; 67
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8b a3       	std	Y+35, r24	; 0x23
    196a:	9c a3       	std	Y+36, r25	; 0x24
    196c:	ad a3       	std	Y+37, r26	; 0x25
    196e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1970:	6b a1       	ldd	r22, Y+35	; 0x23
    1972:	7c a1       	ldd	r23, Y+36	; 0x24
    1974:	8d a1       	ldd	r24, Y+37	; 0x25
    1976:	9e a1       	ldd	r25, Y+38	; 0x26
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9a a3       	std	Y+34, r25	; 0x22
    198e:	89 a3       	std	Y+33, r24	; 0x21
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1992:	6b a1       	ldd	r22, Y+35	; 0x23
    1994:	7c a1       	ldd	r23, Y+36	; 0x24
    1996:	8d a1       	ldd	r24, Y+37	; 0x25
    1998:	9e a1       	ldd	r25, Y+38	; 0x26
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6f a1       	ldd	r22, Y+39	; 0x27
    19ac:	78 a5       	ldd	r23, Y+40	; 0x28
    19ae:	89 a5       	ldd	r24, Y+41	; 0x29
    19b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9a a3       	std	Y+34, r25	; 0x22
    19d0:	89 a3       	std	Y+33, r24	; 0x21
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_displayCharacter+0x1ca>
    19d4:	89 e1       	ldi	r24, 0x19	; 25
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	98 a3       	std	Y+32, r25	; 0x20
    19da:	8f 8f       	std	Y+31, r24	; 0x1f
    19dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19de:	98 a1       	ldd	r25, Y+32	; 0x20
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_displayCharacter+0x1b8>
    19e4:	98 a3       	std	Y+32, r25	; 0x20
    19e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ea:	9a a1       	ldd	r25, Y+34	; 0x22
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9a a3       	std	Y+34, r25	; 0x22
    19f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	89 a1       	ldd	r24, Y+33	; 0x21
    19f4:	9a a1       	ldd	r25, Y+34	; 0x22
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_displayCharacter+0x1ac>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6b a1       	ldd	r22, Y+35	; 0x23
    19fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1a00:	8d a1       	ldd	r24, Y+37	; 0x25
    1a02:	9e a1       	ldd	r25, Y+38	; 0x26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9a a3       	std	Y+34, r25	; 0x22
    1a0e:	89 a3       	std	Y+33, r24	; 0x21
    1a10:	89 a1       	ldd	r24, Y+33	; 0x21
    1a12:	9a a1       	ldd	r25, Y+34	; 0x22
    1a14:	9e 8f       	std	Y+30, r25	; 0x1e
    1a16:	8d 8f       	std	Y+29, r24	; 0x1d
    1a18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_displayCharacter+0x1f4>
    1a20:	9e 8f       	std	Y+30, r25	; 0x1e
    1a22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	69 ad       	ldd	r22, Y+57	; 0x39
    1a28:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <GPIO_writePort>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e8       	ldi	r26, 0x80	; 128
    1a32:	bf e3       	ldi	r27, 0x3F	; 63
    1a34:	89 8f       	std	Y+25, r24	; 0x19
    1a36:	9a 8f       	std	Y+26, r25	; 0x1a
    1a38:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	53 e4       	ldi	r21, 0x43	; 67
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8d 8b       	std	Y+21, r24	; 0x15
    1a56:	9e 8b       	std	Y+22, r25	; 0x16
    1a58:	af 8b       	std	Y+23, r26	; 0x17
    1a5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a60:	8f 89       	ldd	r24, Y+23	; 0x17
    1a62:	98 8d       	ldd	r25, Y+24	; 0x18
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_displayCharacter+0x256>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c 8b       	std	Y+20, r25	; 0x14
    1a7a:	8b 8b       	std	Y+19, r24	; 0x13
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a80:	7e 89       	ldd	r23, Y+22	; 0x16
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	98 8d       	ldd	r25, Y+24	; 0x18
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	69 8d       	ldd	r22, Y+25	; 0x19
    1a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9c 8b       	std	Y+20, r25	; 0x14
    1abc:	8b 8b       	std	Y+19, r24	; 0x13
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_displayCharacter+0x2b6>
    1ac0:	89 e1       	ldi	r24, 0x19	; 25
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9a 8b       	std	Y+18, r25	; 0x12
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
    1ac8:	89 89       	ldd	r24, Y+17	; 0x11
    1aca:	9a 89       	ldd	r25, Y+18	; 0x12
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_displayCharacter+0x2a4>
    1ad0:	9a 8b       	std	Y+18, r25	; 0x12
    1ad2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_displayCharacter+0x298>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9c 8b       	std	Y+20, r25	; 0x14
    1afa:	8b 8b       	std	Y+19, r24	; 0x13
    1afc:	8b 89       	ldd	r24, Y+19	; 0x13
    1afe:	9c 89       	ldd	r25, Y+20	; 0x14
    1b00:	98 8b       	std	Y+16, r25	; 0x10
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
    1b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b06:	98 89       	ldd	r25, Y+16	; 0x10
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_displayCharacter+0x2e0>
    1b0c:	98 8b       	std	Y+16, r25	; 0x10
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e8       	ldi	r26, 0x80	; 128
    1b20:	bf e3       	ldi	r27, 0x3F	; 63
    1b22:	8b 87       	std	Y+11, r24	; 0x0b
    1b24:	9c 87       	std	Y+12, r25	; 0x0c
    1b26:	ad 87       	std	Y+13, r26	; 0x0d
    1b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	53 e4       	ldi	r21, 0x43	; 67
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	a9 87       	std	Y+9, r26	; 0x09
    1b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <LCD_displayCharacter+0x344>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_displayCharacter+0x3a4>
    1bae:	89 e1       	ldi	r24, 0x19	; 25
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_displayCharacter+0x392>
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_displayCharacter+0x386>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_displayCharacter+0x3ce>
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1bfe:	e9 96       	adiw	r28, 0x39	; 57
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <LCD_displayString+0x6>
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	9b 83       	std	Y+3, r25	; 0x03
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c20:	19 82       	std	Y+1, r1	; 0x01
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e2 0f       	add	r30, r18
    1c32:	f3 1f       	adc	r31, r19
    1c34:	80 81       	ld	r24, Z
    1c36:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_displayCharacter>
		i++;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e2 0f       	add	r30, r18
    1c4e:	f3 1f       	adc	r31, r19
    1c50:	80 81       	ld	r24, Z
    1c52:	88 23       	and	r24, r24
    1c54:	39 f7       	brne	.-50     	; 0x1c24 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <LCD_moveCursor+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <LCD_moveCursor+0x8>
    1c6a:	0f 92       	push	r0
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	c1 f0       	breq	.+48     	; 0x1cb8 <LCD_moveCursor+0x56>
    1c88:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <LCD_moveCursor+0x3a>
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	9d 81       	ldd	r25, Y+5	; 0x05
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	61 f0       	breq	.+24     	; 0x1cb2 <LCD_moveCursor+0x50>
    1c9a:	19 c0       	rjmp	.+50     	; 0x1cce <LCD_moveCursor+0x6c>
    1c9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	69 f0       	breq	.+26     	; 0x1cc0 <LCD_moveCursor+0x5e>
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <LCD_moveCursor+0x66>
    1cb0:	0e c0       	rjmp	.+28     	; 0x1cce <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	0b c0       	rjmp	.+22     	; 0x1cce <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	80 5c       	subi	r24, 0xC0	; 192
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	07 c0       	rjmp	.+14     	; 0x1cce <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	80 5f       	subi	r24, 0xF0	; 240
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	80 5b       	subi	r24, 0xB0	; 176
    1ccc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	80 68       	ori	r24, 0x80	; 128
    1cd2:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_sendCommand>
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <LCD_displayStringRowColumn+0x6>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <LCD_displayStringRowColumn+0x8>
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	6a 83       	std	Y+2, r22	; 0x02
    1cf6:	5c 83       	std	Y+4, r21	; 0x04
    1cf8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	6a 81       	ldd	r22, Y+2	; 0x02
    1cfe:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	62 97       	sbiw	r28, 0x12	; 18
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	9a 89       	ldd	r25, Y+18	; 0x12
    1d34:	9e 01       	movw	r18, r28
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	4a e0       	ldi	r20, 0x0A	; 10
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <itoa>
   LCD_displayString(buff); /* Display the string */
    1d44:	ce 01       	movw	r24, r28
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
}
    1d4c:	62 96       	adiw	r28, 0x12	; 18
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_sendCommand>
}
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <SERVO_rotateAngle>:
#include "servo.h"
#include "std_types.h"
#include "common_macros.h"

void SERVO_rotateAngle(uint16 duty_cycle)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <SERVO_rotateAngle+0x6>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;
    1d80:	ec e4       	ldi	r30, 0x4C	; 76
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	11 82       	std	Z+1, r1	; 0x01
    1d86:	10 82       	st	Z, r1
	ICR1 = 2499;
    1d88:	e6 e4       	ldi	r30, 0x46	; 70
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	83 ec       	ldi	r24, 0xC3	; 195
    1d8e:	99 e0       	ldi	r25, 0x09	; 9
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
	OCR1A = duty_cycle;
    1d94:	ea e4       	ldi	r30, 0x4A	; 74
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
	SET_REG_BITS(TCCR1A , 0X82);
    1da0:	af e4       	ldi	r26, 0x4F	; 79
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	ef e4       	ldi	r30, 0x4F	; 79
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	82 68       	ori	r24, 0x82	; 130
    1dac:	8c 93       	st	X, r24
	SET_REG_BITS(TCCR1B , 0X1A);
    1dae:	ae e4       	ldi	r26, 0x4E	; 78
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ee e4       	ldi	r30, 0x4E	; 78
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	8a 61       	ori	r24, 0x1A	; 26
    1dba:	8c 93       	st	X, r24

}
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <checkNoPass>:


/*
 * [Description]: this function used to check if the system used before or not.
 */
void checkNoPass(){
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <checkNoPass+0x6>
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
	uint8 digit = 0;
    1dd0:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i = 0 ; i < 5 ; i++)
    1dd2:	19 82       	std	Y+1, r1	; 0x01
    1dd4:	12 c0       	rjmp	.+36     	; 0x1dfa <checkNoPass+0x34>
	{
		digit = eeprom_read_byte ((uint8*)i);
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eerd_byte_m16>
    1de0:	8a 83       	std	Y+2, r24	; 0x02
		if(digit == 0xff)
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	8f 3f       	cpi	r24, 0xFF	; 255
    1de6:	21 f4       	brne	.+8      	; 0x1df0 <checkNoPass+0x2a>
		{
			no_pass_flag = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 fc 00 	sts	0x00FC, r24
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <checkNoPass+0x2e>
		}
		else
		{
			no_pass_flag = 0;
    1df0:	10 92 fc 00 	sts	0x00FC, r1
/*
 * [Description]: this function used to check if the system used before or not.
 */
void checkNoPass(){
	uint8 digit = 0;
	for(uint8 i = 0 ; i < 5 ; i++)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	85 30       	cpi	r24, 0x05	; 5
    1dfe:	58 f3       	brcs	.-42     	; 0x1dd6 <checkNoPass+0x10>
			no_pass_flag = 0;
		}
	}

	return;
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <checkServoAndLeds>:

/*
 * [Description]: this function used to check if the servo is zero or 90 angle
 */
void checkServoAndLeds(){
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
	servo_angle_value = eeprom_read_byte(servo_angle_address);
    1e12:	80 91 ee 00 	lds	r24, 0x00EE
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eerd_byte_m16>
    1e1e:	80 93 fd 00 	sts	0x00FD, r24
	ext_room1_value = eeprom_read_byte(room1_address);
    1e22:	80 91 ef 00 	lds	r24, 0x00EF
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eerd_byte_m16>
    1e2e:	80 93 03 01 	sts	0x0103, r24
	ext_room2_value = eeprom_read_byte(room2_address);
    1e32:	80 91 f0 00 	lds	r24, 0x00F0
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eerd_byte_m16>
    1e3e:	80 93 04 01 	sts	0x0104, r24
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <getPassword>:
/*
 * [Description]: using this function to interface with the user to get the password
 * from by using the keypad.
 */
void getPassword()
{
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	2f 97       	sbiw	r28, 0x0f	; 15
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
	uint8 digitNum = 0;
    1e60:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_moveCursor(1,0);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_moveCursor>
	/*looping to get the password's digits from the user*/
	for(digitNum = 0 ; digitNum < SIZE ; digitNum++)
    1e6a:	1f 86       	std	Y+15, r1	; 0x0f
    1e6c:	81 c0       	rjmp	.+258    	; 0x1f70 <getPassword+0x128>
	{
		g_password[digitNum] = KEYPAD_get_Value();
    1e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e70:	08 2f       	mov	r16, r24
    1e72:	10 e0       	ldi	r17, 0x00	; 0
    1e74:	0e 94 05 09 	call	0x120a	; 0x120a <KEYPAD_get_Value>
    1e78:	f8 01       	movw	r30, r16
    1e7a:	ee 50       	subi	r30, 0x0E	; 14
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1e80:	8a e2       	ldi	r24, 0x2A	; 42
    1e82:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_displayCharacter>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	aa ef       	ldi	r26, 0xFA	; 250
    1e8c:	b3 e4       	ldi	r27, 0x43	; 67
    1e8e:	8b 87       	std	Y+11, r24	; 0x0b
    1e90:	9c 87       	std	Y+12, r25	; 0x0c
    1e92:	ad 87       	std	Y+13, r26	; 0x0d
    1e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a e7       	ldi	r20, 0x7A	; 122
    1ea4:	53 e4       	ldi	r21, 0x43	; 67
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8f 83       	std	Y+7, r24	; 0x07
    1eb0:	98 87       	std	Y+8, r25	; 0x08
    1eb2:	a9 87       	std	Y+9, r26	; 0x09
    1eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <getPassword+0x90>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <getPassword+0x10e>
	else if (__tmp > 65535)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <getPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <getPassword+0xf0>
    1f1a:	89 e1       	ldi	r24, 0x19	; 25
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <getPassword+0xde>
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <getPassword+0xd2>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <getPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <getPassword+0x11a>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
void getPassword()
{
	uint8 digitNum = 0;
	LCD_moveCursor(1,0);
	/*looping to get the password's digits from the user*/
	for(digitNum = 0 ; digitNum < SIZE ; digitNum++)
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	8f 87       	std	Y+15, r24	; 0x0f
    1f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f72:	85 30       	cpi	r24, 0x05	; 5
    1f74:	08 f4       	brcc	.+2      	; 0x1f78 <getPassword+0x130>
    1f76:	7b cf       	rjmp	.-266    	; 0x1e6e <getPassword+0x26>
		g_password[digitNum] = KEYPAD_get_Value();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}

}
    1f78:	2f 96       	adiw	r28, 0x0f	; 15
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <getBufferPassword>:

void getBufferPassword(){
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
	uint8 digitNum = 0;
    1fa6:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_moveCursor(1,0);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_moveCursor>

	/*looping to get the password's digits from the user*/
	for(digitNum = 0 ; digitNum < SIZE ; digitNum++){
    1fb0:	1f 86       	std	Y+15, r1	; 0x0f
    1fb2:	81 c0       	rjmp	.+258    	; 0x20b6 <getBufferPassword+0x128>
		g_buffer_password[digitNum] = KEYPAD_get_Value();
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	08 2f       	mov	r16, r24
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	0e 94 05 09 	call	0x120a	; 0x120a <KEYPAD_get_Value>
    1fbe:	f8 01       	movw	r30, r16
    1fc0:	e9 50       	subi	r30, 0x09	; 9
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1fc6:	8a e2       	ldi	r24, 0x2A	; 42
    1fc8:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_displayCharacter>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	aa ef       	ldi	r26, 0xFA	; 250
    1fd2:	b3 e4       	ldi	r27, 0x43	; 67
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	53 e4       	ldi	r21, 0x43	; 67
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <getBufferPassword+0x90>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3f c0       	rjmp	.+126    	; 0x209c <getBufferPassword+0x10e>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <getBufferPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	0f c0       	rjmp	.+30     	; 0x207e <getBufferPassword+0xf0>
    2060:	89 e1       	ldi	r24, 0x19	; 25
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <getBufferPassword+0xde>
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <getBufferPassword+0xd2>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <getBufferPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <getBufferPassword+0x11a>
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
void getBufferPassword(){
	uint8 digitNum = 0;
	LCD_moveCursor(1,0);

	/*looping to get the password's digits from the user*/
	for(digitNum = 0 ; digitNum < SIZE ; digitNum++){
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	8f 87       	std	Y+15, r24	; 0x0f
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	85 30       	cpi	r24, 0x05	; 5
    20ba:	08 f4       	brcc	.+2      	; 0x20be <getBufferPassword+0x130>
    20bc:	7b cf       	rjmp	.-266    	; 0x1fb4 <getBufferPassword+0x26>
		g_buffer_password[digitNum] = KEYPAD_get_Value();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}

}
    20be:	2f 96       	adiw	r28, 0x0f	; 15
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <newPassword>:

/*
 * [Description]: this function used to is used at the first time during dealing with
 * the locker and when the user wants to change the password.
 */
void newPassword(void){
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    20dc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
	LCD_displayString("New Pass:");
    20e0:	80 e6       	ldi	r24, 0x60	; 96
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
	getPassword();
    20e8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <getPassword>
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <confirmation>:

/*
 * [Description]: this function used to confirm the password by making the user
 * insert the password from the previous step to confirm it.
 */
void confirmation(void) {
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    20fa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
	LCD_displayString("Reenter Pass:");
    20fe:	8a e6       	ldi	r24, 0x6A	; 106
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
	getBufferPassword();
    2106:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <getBufferPassword>
}
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <compare>:
/*
 * [Description]: this function used to take two arrays and compare if they have the same elements or not
 * according to this it gives a flag confirm_password = 0 if not matched and 1 if matched
 */
void compare(uint8 *arr1 , uint8 *arr2)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <compare+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <compare+0x8>
    2118:	0f 92       	push	r0
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	9b 83       	std	Y+3, r25	; 0x03
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	7d 83       	std	Y+5, r23	; 0x05
    2124:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i = 0; i < SIZE; i++)
    2126:	19 82       	std	Y+1, r1	; 0x01
    2128:	1a c0       	rjmp	.+52     	; 0x215e <compare+0x4e>
	{
		if (arr1[i] != arr2[i])
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	fc 01       	movw	r30, r24
    2136:	e2 0f       	add	r30, r18
    2138:	f3 1f       	adc	r31, r19
    213a:	40 81       	ld	r20, Z
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	fc 01       	movw	r30, r24
    2148:	e2 0f       	add	r30, r18
    214a:	f3 1f       	adc	r31, r19
    214c:	80 81       	ld	r24, Z
    214e:	48 17       	cp	r20, r24
    2150:	19 f0       	breq	.+6      	; 0x2158 <compare+0x48>
		{
			confirm_password = 0;
    2152:	10 92 fe 00 	sts	0x00FE, r1
    2156:	09 c0       	rjmp	.+18     	; 0x216a <compare+0x5a>
 * [Description]: this function used to take two arrays and compare if they have the same elements or not
 * according to this it gives a flag confirm_password = 0 if not matched and 1 if matched
 */
void compare(uint8 *arr1 , uint8 *arr2)
{
	for (uint8 i = 0; i < SIZE; i++)
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	18 f3       	brcs	.-58     	; 0x212a <compare+0x1a>
		{
			confirm_password = 0;
			return;
		}
	}
	confirm_password = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 93 fe 00 	sts	0x00FE, r24
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <savePassword>:

/*
 * [Description]: this function used to get the password from the g_password array to the eeprom
 */
void savePassword(){
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
	for (uint8 i = 0; i < SIZE; i++) {
    2184:	19 82       	std	Y+1, r1	; 0x01
    2186:	12 c0       	rjmp	.+36     	; 0x21ac <savePassword+0x32>
		eeprom_write_byte((uint8*)i , g_password[i]);
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	ac 01       	movw	r20, r24
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	fc 01       	movw	r30, r24
    2198:	ee 50       	subi	r30, 0x0E	; 14
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	20 81       	ld	r18, Z
    219e:	ca 01       	movw	r24, r20
    21a0:	62 2f       	mov	r22, r18
    21a2:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>

/*
 * [Description]: this function used to get the password from the g_password array to the eeprom
 */
void savePassword(){
	for (uint8 i = 0; i < SIZE; i++) {
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	85 30       	cpi	r24, 0x05	; 5
    21b0:	58 f3       	brcs	.-42     	; 0x2188 <savePassword+0xe>
		eeprom_write_byte((uint8*)i , g_password[i]);
	}
	no_pass_flag = 0;
    21b2:	10 92 fc 00 	sts	0x00FC, r1
}
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <getPassFromMemory>:

/*
 * [Description]: this function used to get the password from the memory and assign it to the
 * g_buffer_password array
 */
void getPassFromMemory(){
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	for (uint8 i = 0; i < SIZE; i++) {
    21cc:	19 82       	std	Y+1, r1	; 0x01
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <getPassFromMemory+0x30>
		g_buffer_password[i] = eeprom_read_byte ((uint8*)i);
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	08 2f       	mov	r16, r24
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eerd_byte_m16>
    21e0:	f8 01       	movw	r30, r16
    21e2:	e9 50       	subi	r30, 0x09	; 9
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 83       	st	Z, r24
/*
 * [Description]: this function used to get the password from the memory and assign it to the
 * g_buffer_password array
 */
void getPassFromMemory(){
	for (uint8 i = 0; i < SIZE; i++) {
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	85 30       	cpi	r24, 0x05	; 5
    21f2:	70 f3       	brcs	.-36     	; 0x21d0 <getPassFromMemory+0x12>
		g_buffer_password[i] = eeprom_read_byte ((uint8*)i);
	}
}
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	08 95       	ret

00002200 <mainOperation>:
/*
 * [Description]: this function used to display the options "open door" or "change the password"
 */
void mainOperation(void){
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2208:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
	LCD_displayString("D:Open door");
    220c:	88 e7       	ldi	r24, 0x78	; 120
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
	LCD_moveCursor(1,0);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_moveCursor>
	LCD_displayString("C:change pass ");
    221c:	84 e8       	ldi	r24, 0x84	; 132
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <openDoor>:

/*
 * [Description]: this function used to get the password from the user when the option
 *  "open door" is selected.
 */
void openDoor(void){
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2232:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
	LCD_displayString("Enter Pass:");
    2236:	83 e9       	ldi	r24, 0x93	; 147
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
	getPassword();
    223e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <getPassword>
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <changePassword>:

/*
 * [Description]: this function used to get the password from the user when the option
 * "change password" is selected.
 */
void changePassword(void){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2250:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
	LCD_displayString("Enter Old Pass:");
    2254:	8f e9       	ldi	r24, 0x9F	; 159
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
	getPassword();
    225c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <getPassword>
}
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <main>:


int main()
{
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	cb 57       	subi	r28, 0x7B	; 123
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
	/*variable used to hold the selected operation*/
	uint8 operation;


	/********* this sector to initialize the drivers *******/
	sei();
    2280:	78 94       	sei
	LCD_init();
    2282:	0e 94 fd 09 	call	0x13fa	; 0x13fa <LCD_init>
	LCD_displayString("WELCOME");
    2286:	8f ea       	ldi	r24, 0xAF	; 175
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
    228e:	fe 01       	movw	r30, r28
    2290:	e3 59       	subi	r30, 0x93	; 147
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e8       	ldi	r25, 0x80	; 128
    2298:	ab e3       	ldi	r26, 0x3B	; 59
    229a:	b5 e4       	ldi	r27, 0x45	; 69
    229c:	80 83       	st	Z, r24
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	a2 83       	std	Z+2, r26	; 0x02
    22a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	8e 01       	movw	r16, r28
    22a6:	07 59       	subi	r16, 0x97	; 151
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	fe 01       	movw	r30, r28
    22ac:	e3 59       	subi	r30, 0x93	; 147
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a e7       	ldi	r20, 0x7A	; 122
    22be:	53 e4       	ldi	r21, 0x43	; 67
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	f8 01       	movw	r30, r16
    22ca:	80 83       	st	Z, r24
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	a2 83       	std	Z+2, r26	; 0x02
    22d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 59       	subi	r30, 0x97	; 151
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	44 f4       	brge	.+16     	; 0x2300 <main+0x9a>
		__ticks = 1;
    22f0:	fe 01       	movw	r30, r28
    22f2:	e9 59       	subi	r30, 0x99	; 153
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
    22fe:	64 c0       	rjmp	.+200    	; 0x23c8 <main+0x162>
	else if (__tmp > 65535)
    2300:	fe 01       	movw	r30, r28
    2302:	e7 59       	subi	r30, 0x97	; 151
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	0c f0       	brlt	.+2      	; 0x2320 <main+0xba>
    231e:	43 c0       	rjmp	.+134    	; 0x23a6 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	fe 01       	movw	r30, r28
    2322:	e3 59       	subi	r30, 0x93	; 147
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8e 01       	movw	r16, r28
    2340:	09 59       	subi	r16, 0x99	; 153
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	f8 01       	movw	r30, r16
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
    2356:	1f c0       	rjmp	.+62     	; 0x2396 <main+0x130>
    2358:	fe 01       	movw	r30, r28
    235a:	eb 59       	subi	r30, 0x9B	; 155
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	89 e1       	ldi	r24, 0x19	; 25
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    2366:	fe 01       	movw	r30, r28
    2368:	eb 59       	subi	r30, 0x9B	; 155
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <main+0x10a>
    2374:	fe 01       	movw	r30, r28
    2376:	eb 59       	subi	r30, 0x9B	; 155
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	de 01       	movw	r26, r28
    2380:	a9 59       	subi	r26, 0x99	; 153
    2382:	bf 4f       	sbci	r27, 0xFF	; 255
    2384:	fe 01       	movw	r30, r28
    2386:	e9 59       	subi	r30, 0x99	; 153
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	11 96       	adiw	r26, 0x01	; 1
    2392:	9c 93       	st	X, r25
    2394:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	fe 01       	movw	r30, r28
    2398:	e9 59       	subi	r30, 0x99	; 153
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	d1 f6       	brne	.-76     	; 0x2358 <main+0xf2>
    23a4:	27 c0       	rjmp	.+78     	; 0x23f4 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a6:	8e 01       	movw	r16, r28
    23a8:	09 59       	subi	r16, 0x99	; 153
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 59       	subi	r30, 0x97	; 151
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	f8 01       	movw	r30, r16
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
    23c8:	de 01       	movw	r26, r28
    23ca:	ad 59       	subi	r26, 0x9D	; 157
    23cc:	bf 4f       	sbci	r27, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e9 59       	subi	r30, 0x99	; 153
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	8d 93       	st	X+, r24
    23da:	9c 93       	st	X, r25
    23dc:	fe 01       	movw	r30, r28
    23de:	ed 59       	subi	r30, 0x9D	; 157
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <main+0x180>
    23ea:	fe 01       	movw	r30, r28
    23ec:	ed 59       	subi	r30, 0x9D	; 157
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
	_delay_ms(3000);
	UART_init(9600);
    23f4:	60 e8       	ldi	r22, 0x80	; 128
    23f6:	75 e2       	ldi	r23, 0x25	; 37
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <UART_init>
	Buzzer_Init();
    2400:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_Init>
	/*******************************************************/
	TIMER0_CONFIG timer0 = {NORMAL_MODE_TIMER0 , 0 , 0 , F_CPU0_1024};
    2404:	fe 01       	movw	r30, r28
    2406:	ee 58       	subi	r30, 0x8E	; 142
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	10 82       	st	Z, r1
    240c:	fe 01       	movw	r30, r28
    240e:	ee 58       	subi	r30, 0x8E	; 142
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	11 82       	std	Z+1, r1	; 0x01
    2414:	fe 01       	movw	r30, r28
    2416:	ee 58       	subi	r30, 0x8E	; 142
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	12 82       	std	Z+2, r1	; 0x02
    241c:	fe 01       	movw	r30, r28
    241e:	ee 58       	subi	r30, 0x8E	; 142
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	85 e0       	ldi	r24, 0x05	; 5
    2424:	83 83       	std	Z+3, r24	; 0x03
	TIMER2_CONFIG timer2 = {NORMAL_MODE_TIMER0 , 0 , 0 , F_CPU0_1024};
    2426:	fe 01       	movw	r30, r28
    2428:	ea 58       	subi	r30, 0x8A	; 138
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	10 82       	st	Z, r1
    242e:	fe 01       	movw	r30, r28
    2430:	ea 58       	subi	r30, 0x8A	; 138
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	11 82       	std	Z+1, r1	; 0x01
    2436:	fe 01       	movw	r30, r28
    2438:	ea 58       	subi	r30, 0x8A	; 138
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	12 82       	std	Z+2, r1	; 0x02
    243e:	fe 01       	movw	r30, r28
    2440:	ea 58       	subi	r30, 0x8A	; 138
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	85 e0       	ldi	r24, 0x05	; 5
    2446:	83 83       	std	Z+3, r24	; 0x03
	TIMER2_init(&timer2);
    2448:	ce 01       	movw	r24, r28
    244a:	8a 58       	subi	r24, 0x8A	; 138
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	0e 94 94 1b 	call	0x3728	; 0x3728 <TIMER2_init>

	/*Set the tap pin direction and give it initial value of 0*/
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	67 e0       	ldi	r22, 0x07	; 7
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    245c:	83 e0       	ldi	r24, 0x03	; 3
    245e:	67 e0       	ldi	r22, 0x07	; 7
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>


	/*set the two rooms pins direction and make it off initially*/
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	66 e0       	ldi	r22, 0x06	; 6
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	64 e0       	ldi	r22, 0x04	; 4
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	/*to close the two leds initially*/
	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	66 e0       	ldi	r22, 0x06	; 6
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	64 e0       	ldi	r22, 0x04	; 4
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
	/*Make OC1A pin as output (for servo)*/
	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	65 e0       	ldi	r22, 0x05	; 5
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>

	/*make the sensors pins as input pins*/
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	62 e0       	ldi	r22, 0x02	; 2
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
    24a2:	83 e0       	ldi	r24, 0x03	; 3
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <GPIO_setupPinDirection>

	/*------------------------ checks sector---------------------*/
	checkNoPass();
    24ac:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <checkNoPass>
	if (no_pass_flag)
    24b0:	80 91 fc 00 	lds	r24, 0x00FC
    24b4:	88 23       	and	r24, r24
    24b6:	89 f0       	breq	.+34     	; 0x24da <main+0x274>
	{
		do {
			newPassword();
    24b8:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <newPassword>
			confirmation();
    24bc:	0e 94 79 10 	call	0x20f2	; 0x20f2 <confirmation>
			compare(g_password , g_buffer_password );
    24c0:	82 ef       	ldi	r24, 0xF2	; 242
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	27 ef       	ldi	r18, 0xF7	; 247
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	b9 01       	movw	r22, r18
    24ca:	0e 94 88 10 	call	0x2110	; 0x2110 <compare>
		} while (!(confirm_password));
    24ce:	80 91 fe 00 	lds	r24, 0x00FE
    24d2:	88 23       	and	r24, r24
    24d4:	89 f3       	breq	.-30     	; 0x24b8 <main+0x252>
		savePassword();
    24d6:	0e 94 bd 10 	call	0x217a	; 0x217a <savePassword>
	}

	checkServoAndLeds();
    24da:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <checkServoAndLeds>
	if(servo_angle_value != 0){
    24de:	80 91 fd 00 	lds	r24, 0x00FD
    24e2:	88 23       	and	r24, r24
    24e4:	79 f0       	breq	.+30     	; 0x2504 <main+0x29e>
		SERVO_rotateAngle(ROTATE_ZERO_ANGLE);
    24e6:	8c e7       	ldi	r24, 0x7C	; 124
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SERVO_rotateAngle>
		servo_angle_value = 0;
    24ee:	10 92 fd 00 	sts	0x00FD, r1
		eeprom_write_byte(servo_angle_address, servo_angle_value);
    24f2:	80 91 ee 00 	lds	r24, 0x00EE
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	20 91 fd 00 	lds	r18, 0x00FD
    24fe:	62 2f       	mov	r22, r18
    2500:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
	}

	if(ext_room1_value == 0){
    2504:	80 91 03 01 	lds	r24, 0x0103
    2508:	88 23       	and	r24, r24
    250a:	31 f4       	brne	.+12     	; 0x2518 <main+0x2b2>
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	64 e0       	ldi	r22, 0x04	; 4
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    2516:	09 c0       	rjmp	.+18     	; 0x252a <main+0x2c4>
	}else if(ext_room1_value == 1){
    2518:	80 91 03 01 	lds	r24, 0x0103
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	29 f4       	brne	.+10     	; 0x252a <main+0x2c4>
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_HIGH);
    2520:	83 e0       	ldi	r24, 0x03	; 3
    2522:	64 e0       	ldi	r22, 0x04	; 4
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
	}

	if(ext_room2_value == 0){
    252a:	80 91 04 01 	lds	r24, 0x0104
    252e:	88 23       	and	r24, r24
    2530:	31 f4       	brne	.+12     	; 0x253e <main+0x2d8>
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	66 e0       	ldi	r22, 0x06	; 6
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <main+0x2ea>
	}else if(ext_room2_value == 1){
    253e:	80 91 04 01 	lds	r24, 0x0104
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	29 f4       	brne	.+10     	; 0x2550 <main+0x2ea>
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	66 e0       	ldi	r22, 0x06	; 6
    254a:	41 e0       	ldi	r20, 0x01	; 1
    254c:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>


	/********************************************************************************************/
	while (1){
		/*printing the main options and wait to get operation*/
		mainOperation();
    2550:	0e 94 00 11 	call	0x2200	; 0x2200 <mainOperation>
		operation = KEYPAD_get_Value();
    2554:	0e 94 05 09 	call	0x120a	; 0x120a <KEYPAD_get_Value>
    2558:	fe 01       	movw	r30, r28
    255a:	ef 58       	subi	r30, 0x8F	; 143
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 83       	st	Z, r24
    2560:	fe 01       	movw	r30, r28
    2562:	e1 5a       	subi	r30, 0xA1	; 161
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	aa ef       	ldi	r26, 0xFA	; 250
    256c:	b3 e4       	ldi	r27, 0x43	; 67
    256e:	80 83       	st	Z, r24
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	a2 83       	std	Z+2, r26	; 0x02
    2574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	8e 01       	movw	r16, r28
    2578:	05 5a       	subi	r16, 0xA5	; 165
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	e1 5a       	subi	r30, 0xA1	; 161
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	4a e7       	ldi	r20, 0x7A	; 122
    2590:	53 e4       	ldi	r21, 0x43	; 67
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	f8 01       	movw	r30, r16
    259c:	80 83       	st	Z, r24
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	a2 83       	std	Z+2, r26	; 0x02
    25a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a4:	fe 01       	movw	r30, r28
    25a6:	e5 5a       	subi	r30, 0xA5	; 165
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	44 f4       	brge	.+16     	; 0x25d2 <main+0x36c>
		__ticks = 1;
    25c2:	fe 01       	movw	r30, r28
    25c4:	e7 5a       	subi	r30, 0xA7	; 167
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	64 c0       	rjmp	.+200    	; 0x269a <main+0x434>
	else if (__tmp > 65535)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 5a       	subi	r30, 0xA5	; 165
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	0c f0       	brlt	.+2      	; 0x25f2 <main+0x38c>
    25f0:	43 c0       	rjmp	.+134    	; 0x2678 <main+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	fe 01       	movw	r30, r28
    25f4:	e1 5a       	subi	r30, 0xA1	; 161
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	8e 01       	movw	r16, r28
    2612:	07 5a       	subi	r16, 0xA7	; 167
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	1f c0       	rjmp	.+62     	; 0x2668 <main+0x402>
    262a:	fe 01       	movw	r30, r28
    262c:	e9 5a       	subi	r30, 0xA9	; 169
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	89 e1       	ldi	r24, 0x19	; 25
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	fe 01       	movw	r30, r28
    263a:	e9 5a       	subi	r30, 0xA9	; 169
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <main+0x3dc>
    2646:	fe 01       	movw	r30, r28
    2648:	e9 5a       	subi	r30, 0xA9	; 169
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2650:	de 01       	movw	r26, r28
    2652:	a7 5a       	subi	r26, 0xA7	; 167
    2654:	bf 4f       	sbci	r27, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	e7 5a       	subi	r30, 0xA7	; 167
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	9c 93       	st	X, r25
    2666:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	fe 01       	movw	r30, r28
    266a:	e7 5a       	subi	r30, 0xA7	; 167
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	d1 f6       	brne	.-76     	; 0x262a <main+0x3c4>
    2676:	28 c0       	rjmp	.+80     	; 0x26c8 <main+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	8e 01       	movw	r16, r28
    267a:	07 5a       	subi	r16, 0xA7	; 167
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
    267e:	fe 01       	movw	r30, r28
    2680:	e5 5a       	subi	r30, 0xA5	; 165
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	f8 01       	movw	r30, r16
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	de 01       	movw	r26, r28
    269c:	ab 5a       	subi	r26, 0xAB	; 171
    269e:	bf 4f       	sbci	r27, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 5a       	subi	r30, 0xA7	; 167
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	11 96       	adiw	r26, 0x01	; 1
    26ac:	9c 93       	st	X, r25
    26ae:	8e 93       	st	-X, r24
    26b0:	fe 01       	movw	r30, r28
    26b2:	eb 5a       	subi	r30, 0xAB	; 171
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <main+0x454>
    26be:	fe 01       	movw	r30, r28
    26c0:	eb 5a       	subi	r30, 0xAB	; 171
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
		_delay_ms(500);


		switch(operation)
    26c8:	fe 01       	movw	r30, r28
    26ca:	ef 58       	subi	r30, 0x8F	; 143
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	ec 96       	adiw	r28, 0x3c	; 60
    26d6:	3f af       	std	Y+63, r19	; 0x3f
    26d8:	2e af       	std	Y+62, r18	; 0x3e
    26da:	ec 97       	sbiw	r28, 0x3c	; 60
    26dc:	ec 96       	adiw	r28, 0x3c	; 60
    26de:	8e ad       	ldd	r24, Y+62	; 0x3e
    26e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    26e2:	ec 97       	sbiw	r28, 0x3c	; 60
    26e4:	8b 32       	cpi	r24, 0x2B	; 43
    26e6:	91 05       	cpc	r25, r1
    26e8:	49 f0       	breq	.+18     	; 0x26fc <main+0x496>
    26ea:	ec 96       	adiw	r28, 0x3c	; 60
    26ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    26ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    26f0:	ec 97       	sbiw	r28, 0x3c	; 60
    26f2:	ed 32       	cpi	r30, 0x2D	; 45
    26f4:	f1 05       	cpc	r31, r1
    26f6:	09 f4       	brne	.+2      	; 0x26fa <main+0x494>
    26f8:	8d c2       	rjmp	.+1306   	; 0x2c14 <main+0x9ae>
    26fa:	2a cf       	rjmp	.-428    	; 0x2550 <main+0x2ea>
		case OPEN_DOOR:
		{

			while(1)
			{
				openDoor();
    26fc:	0e 94 15 11 	call	0x222a	; 0x222a <openDoor>
				getPassFromMemory();
    2700:	0e 94 df 10 	call	0x21be	; 0x21be <getPassFromMemory>
				compare(g_password , g_buffer_password );
    2704:	82 ef       	ldi	r24, 0xF2	; 242
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	27 ef       	ldi	r18, 0xF7	; 247
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 88 10 	call	0x2110	; 0x2110 <compare>
				if(!(confirm_password))
    2712:	80 91 fe 00 	lds	r24, 0x00FE
    2716:	88 23       	and	r24, r24
    2718:	09 f0       	breq	.+2      	; 0x271c <main+0x4b6>
    271a:	64 c1       	rjmp	.+712    	; 0x29e4 <main+0x77e>
				{
					/*to make the user have 3 attempts*/
					ext_buzzerAlarm++;
    271c:	80 91 ff 00 	lds	r24, 0x00FF
    2720:	8f 5f       	subi	r24, 0xFF	; 255
    2722:	80 93 ff 00 	sts	0x00FF, r24
					if(ext_buzzerAlarm == 3)
    2726:	80 91 ff 00 	lds	r24, 0x00FF
    272a:	83 30       	cpi	r24, 0x03	; 3
    272c:	39 f7       	brne	.-50     	; 0x26fc <main+0x496>
					{
						ext_theaf_flag = 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	80 93 00 01 	sts	0x0100, r24
						LCD_clearScreen();
    2734:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,3,"A THIEF!!!");
    2738:	27 eb       	ldi	r18, 0xB7	; 183
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	63 e0       	ldi	r22, 0x03	; 3
    2740:	a9 01       	movw	r20, r18
    2742:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayStringRowColumn>
    2746:	fe 01       	movw	r30, r28
    2748:	ef 5a       	subi	r30, 0xAF	; 175
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e8       	ldi	r26, 0x80	; 128
    2752:	bf e3       	ldi	r27, 0x3F	; 63
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	8e 01       	movw	r16, r28
    275e:	03 5b       	subi	r16, 0xB3	; 179
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	fe 01       	movw	r30, r28
    2764:	ef 5a       	subi	r30, 0xAF	; 175
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a e7       	ldi	r20, 0x7A	; 122
    2776:	53 e4       	ldi	r21, 0x43	; 67
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	f8 01       	movw	r30, r16
    2782:	80 83       	st	Z, r24
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	a2 83       	std	Z+2, r26	; 0x02
    2788:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278a:	fe 01       	movw	r30, r28
    278c:	e3 5b       	subi	r30, 0xB3	; 179
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	44 f4       	brge	.+16     	; 0x27b8 <main+0x552>
		__ticks = 1;
    27a8:	fe 01       	movw	r30, r28
    27aa:	e5 5b       	subi	r30, 0xB5	; 181
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
    27b6:	64 c0       	rjmp	.+200    	; 0x2880 <main+0x61a>
	else if (__tmp > 65535)
    27b8:	fe 01       	movw	r30, r28
    27ba:	e3 5b       	subi	r30, 0xB3	; 179
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	0c f0       	brlt	.+2      	; 0x27d8 <main+0x572>
    27d6:	43 c0       	rjmp	.+134    	; 0x285e <main+0x5f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	fe 01       	movw	r30, r28
    27da:	ef 5a       	subi	r30, 0xAF	; 175
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	8e 01       	movw	r16, r28
    27f8:	05 5b       	subi	r16, 0xB5	; 181
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	f8 01       	movw	r30, r16
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	1f c0       	rjmp	.+62     	; 0x284e <main+0x5e8>
    2810:	fe 01       	movw	r30, r28
    2812:	e7 5b       	subi	r30, 0xB7	; 183
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	89 e1       	ldi	r24, 0x19	; 25
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	fe 01       	movw	r30, r28
    2820:	e7 5b       	subi	r30, 0xB7	; 183
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <main+0x5c2>
    282c:	fe 01       	movw	r30, r28
    282e:	e7 5b       	subi	r30, 0xB7	; 183
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	de 01       	movw	r26, r28
    2838:	a5 5b       	subi	r26, 0xB5	; 181
    283a:	bf 4f       	sbci	r27, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e5 5b       	subi	r30, 0xB5	; 181
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	11 96       	adiw	r26, 0x01	; 1
    284a:	9c 93       	st	X, r25
    284c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284e:	fe 01       	movw	r30, r28
    2850:	e5 5b       	subi	r30, 0xB5	; 181
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	d1 f6       	brne	.-76     	; 0x2810 <main+0x5aa>
    285c:	27 c0       	rjmp	.+78     	; 0x28ac <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285e:	8e 01       	movw	r16, r28
    2860:	05 5b       	subi	r16, 0xB5	; 181
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	e3 5b       	subi	r30, 0xB3	; 179
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	de 01       	movw	r26, r28
    2882:	a9 5b       	subi	r26, 0xB9	; 185
    2884:	bf 4f       	sbci	r27, 0xFF	; 255
    2886:	fe 01       	movw	r30, r28
    2888:	e5 5b       	subi	r30, 0xB5	; 181
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	8d 93       	st	X+, r24
    2892:	9c 93       	st	X, r25
    2894:	fe 01       	movw	r30, r28
    2896:	e9 5b       	subi	r30, 0xB9	; 185
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x638>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e9 5b       	subi	r30, 0xB9	; 185
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
						_delay_ms(1);
						LCD_displayStringRowColumn(1,3,"GO AWAY!!!!");
    28ac:	22 ec       	ldi	r18, 0xC2	; 194
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	63 e0       	ldi	r22, 0x03	; 3
    28b4:	a9 01       	movw	r20, r18
    28b6:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayStringRowColumn>
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 5b       	subi	r30, 0xBD	; 189
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e8       	ldi	r26, 0x80	; 128
    28c6:	bf e3       	ldi	r27, 0x3F	; 63
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	8e 01       	movw	r16, r28
    28d2:	01 5c       	subi	r16, 0xC1	; 193
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 5b       	subi	r30, 0xBD	; 189
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4a e7       	ldi	r20, 0x7A	; 122
    28ea:	53 e4       	ldi	r21, 0x43	; 67
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fe:	fe 01       	movw	r30, r28
    2900:	ff 96       	adiw	r30, 0x3f	; 63
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <main+0x6be>
		__ticks = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9e af       	std	Y+62, r25	; 0x3e
    2920:	8d af       	std	Y+61, r24	; 0x3d
    2922:	46 c0       	rjmp	.+140    	; 0x29b0 <main+0x74a>
	else if (__tmp > 65535)
    2924:	fe 01       	movw	r30, r28
    2926:	ff 96       	adiw	r30, 0x3f	; 63
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	57 e4       	ldi	r21, 0x47	; 71
    2938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293c:	18 16       	cp	r1, r24
    293e:	64 f5       	brge	.+88     	; 0x2998 <main+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2940:	fe 01       	movw	r30, r28
    2942:	ed 5b       	subi	r30, 0xBD	; 189
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9e af       	std	Y+62, r25	; 0x3e
    296c:	8d af       	std	Y+61, r24	; 0x3d
    296e:	0f c0       	rjmp	.+30     	; 0x298e <main+0x728>
    2970:	89 e1       	ldi	r24, 0x19	; 25
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9c af       	std	Y+60, r25	; 0x3c
    2976:	8b af       	std	Y+59, r24	; 0x3b
    2978:	8b ad       	ldd	r24, Y+59	; 0x3b
    297a:	9c ad       	ldd	r25, Y+60	; 0x3c
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <main+0x716>
    2980:	9c af       	std	Y+60, r25	; 0x3c
    2982:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2984:	8d ad       	ldd	r24, Y+61	; 0x3d
    2986:	9e ad       	ldd	r25, Y+62	; 0x3e
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	9e af       	std	Y+62, r25	; 0x3e
    298c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2990:	9e ad       	ldd	r25, Y+62	; 0x3e
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	69 f7       	brne	.-38     	; 0x2970 <main+0x70a>
    2996:	16 c0       	rjmp	.+44     	; 0x29c4 <main+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	fe 01       	movw	r30, r28
    299a:	ff 96       	adiw	r30, 0x3f	; 63
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e af       	std	Y+62, r25	; 0x3e
    29ae:	8d af       	std	Y+61, r24	; 0x3d
    29b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29b4:	9a af       	std	Y+58, r25	; 0x3a
    29b6:	89 af       	std	Y+57, r24	; 0x39
    29b8:	89 ad       	ldd	r24, Y+57	; 0x39
    29ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <main+0x756>
    29c0:	9a af       	std	Y+58, r25	; 0x3a
    29c2:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1);

						TIMER0_init(&timer0);
    29c4:	ce 01       	movw	r24, r28
    29c6:	8e 58       	subi	r24, 0x8E	; 142
    29c8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ca:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <TIMER0_init>
						Buzzer_ON();
    29ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_ON>
						while(ext_buzzerAlarm != 0); //that zero value will be gotten to that variable by the timer0.c file
    29d2:	80 91 ff 00 	lds	r24, 0x00FF
    29d6:	88 23       	and	r24, r24
    29d8:	e1 f7       	brne	.-8      	; 0x29d2 <main+0x76c>
						TIMER0_DEINIT();
    29da:	0e 94 18 18 	call	0x3030	; 0x3030 <TIMER0_DEINIT>
						ext_theaf_flag = 0;
    29de:	10 92 00 01 	sts	0x0100, r1
    29e2:	b6 cd       	rjmp	.-1172   	; 0x2550 <main+0x2ea>
					/*------ if the user entered wrong password for 3 times -------*/
				}

				/*------------- if the entered password is correct ------------*/
				else{
					LCD_clearScreen();
    29e4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a0 e8       	ldi	r26, 0x80	; 128
    29ee:	bf e3       	ldi	r27, 0x3F	; 63
    29f0:	8d ab       	std	Y+53, r24	; 0x35
    29f2:	9e ab       	std	Y+54, r25	; 0x36
    29f4:	af ab       	std	Y+55, r26	; 0x37
    29f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	6d a9       	ldd	r22, Y+53	; 0x35
    29fa:	7e a9       	ldd	r23, Y+54	; 0x36
    29fc:	8f a9       	ldd	r24, Y+55	; 0x37
    29fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a e7       	ldi	r20, 0x7A	; 122
    2a06:	53 e4       	ldi	r21, 0x43	; 67
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	89 ab       	std	Y+49, r24	; 0x31
    2a12:	9a ab       	std	Y+50, r25	; 0x32
    2a14:	ab ab       	std	Y+51, r26	; 0x33
    2a16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a18:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e8       	ldi	r20, 0x80	; 128
    2a26:	5f e3       	ldi	r21, 0x3F	; 63
    2a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2c:	88 23       	and	r24, r24
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <main+0x7d4>
		__ticks = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	98 ab       	std	Y+48, r25	; 0x30
    2a36:	8f a7       	std	Y+47, r24	; 0x2f
    2a38:	3f c0       	rjmp	.+126    	; 0x2ab8 <main+0x852>
	else if (__tmp > 65535)
    2a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a40:	9c a9       	ldd	r25, Y+52	; 0x34
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4e:	18 16       	cp	r1, r24
    2a50:	4c f5       	brge	.+82     	; 0x2aa4 <main+0x83e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a52:	6d a9       	ldd	r22, Y+53	; 0x35
    2a54:	7e a9       	ldd	r23, Y+54	; 0x36
    2a56:	8f a9       	ldd	r24, Y+55	; 0x37
    2a58:	98 ad       	ldd	r25, Y+56	; 0x38
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e2       	ldi	r20, 0x20	; 32
    2a60:	51 e4       	ldi	r21, 0x41	; 65
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	98 ab       	std	Y+48, r25	; 0x30
    2a78:	8f a7       	std	Y+47, r24	; 0x2f
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <main+0x834>
    2a7c:	89 e1       	ldi	r24, 0x19	; 25
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9e a7       	std	Y+46, r25	; 0x2e
    2a82:	8d a7       	std	Y+45, r24	; 0x2d
    2a84:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a86:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <main+0x822>
    2a8c:	9e a7       	std	Y+46, r25	; 0x2e
    2a8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a92:	98 a9       	ldd	r25, Y+48	; 0x30
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	98 ab       	std	Y+48, r25	; 0x30
    2a98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	69 f7       	brne	.-38     	; 0x2a7c <main+0x816>
    2aa2:	14 c0       	rjmp	.+40     	; 0x2acc <main+0x866>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa4:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa6:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa8:	8b a9       	ldd	r24, Y+51	; 0x33
    2aaa:	9c a9       	ldd	r25, Y+52	; 0x34
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	98 ab       	std	Y+48, r25	; 0x30
    2ab6:	8f a7       	std	Y+47, r24	; 0x2f
    2ab8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aba:	98 a9       	ldd	r25, Y+48	; 0x30
    2abc:	9c a7       	std	Y+44, r25	; 0x2c
    2abe:	8b a7       	std	Y+43, r24	; 0x2b
    2ac0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ac2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <main+0x85e>
    2ac8:	9c a7       	std	Y+44, r25	; 0x2c
    2aca:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1);
					LCD_displayString("OPENED");
    2acc:	8e ec       	ldi	r24, 0xCE	; 206
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e8       	ldi	r26, 0x80	; 128
    2ada:	bf e3       	ldi	r27, 0x3F	; 63
    2adc:	8f a3       	std	Y+39, r24	; 0x27
    2ade:	98 a7       	std	Y+40, r25	; 0x28
    2ae0:	a9 a7       	std	Y+41, r26	; 0x29
    2ae2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a e7       	ldi	r20, 0x7A	; 122
    2af2:	53 e4       	ldi	r21, 0x43	; 67
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8b a3       	std	Y+35, r24	; 0x23
    2afe:	9c a3       	std	Y+36, r25	; 0x24
    2b00:	ad a3       	std	Y+37, r26	; 0x25
    2b02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b04:	6b a1       	ldd	r22, Y+35	; 0x23
    2b06:	7c a1       	ldd	r23, Y+36	; 0x24
    2b08:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <main+0x8c0>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9a a3       	std	Y+34, r25	; 0x22
    2b22:	89 a3       	std	Y+33, r24	; 0x21
    2b24:	3f c0       	rjmp	.+126    	; 0x2ba4 <main+0x93e>
	else if (__tmp > 65535)
    2b26:	6b a1       	ldd	r22, Y+35	; 0x23
    2b28:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	4c f5       	brge	.+82     	; 0x2b90 <main+0x92a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b40:	78 a5       	ldd	r23, Y+40	; 0x28
    2b42:	89 a5       	ldd	r24, Y+41	; 0x29
    2b44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9a a3       	std	Y+34, r25	; 0x22
    2b64:	89 a3       	std	Y+33, r24	; 0x21
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <main+0x920>
    2b68:	89 e1       	ldi	r24, 0x19	; 25
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	98 a3       	std	Y+32, r25	; 0x20
    2b6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b72:	98 a1       	ldd	r25, Y+32	; 0x20
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <main+0x90e>
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	9a a3       	std	Y+34, r25	; 0x22
    2b84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b86:	89 a1       	ldd	r24, Y+33	; 0x21
    2b88:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <main+0x902>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <main+0x952>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b90:	6b a1       	ldd	r22, Y+35	; 0x23
    2b92:	7c a1       	ldd	r23, Y+36	; 0x24
    2b94:	8d a1       	ldd	r24, Y+37	; 0x25
    2b96:	9e a1       	ldd	r25, Y+38	; 0x26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9a a3       	std	Y+34, r25	; 0x22
    2ba2:	89 a3       	std	Y+33, r24	; 0x21
    2ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    2baa:	8d 8f       	std	Y+29, r24	; 0x1d
    2bac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <main+0x94a>
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1);
					LCD_moveCursor(1,0);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_moveCursor>
					LCD_displayString("Press * to close");
    2bc0:	85 ed       	ldi	r24, 0xD5	; 213
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <LCD_displayString>
					ext_buzzerAlarm = 0;
    2bc8:	10 92 ff 00 	sts	0x00FF, r1
					SERVO_rotateAngle(ROTATE_90_ANGLE);
    2bcc:	8a ef       	ldi	r24, 0xFA	; 250
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SERVO_rotateAngle>
					servo_angle_value = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 93 fd 00 	sts	0x00FD, r24
					eeprom_write_byte(servo_angle_address, servo_angle_value);
    2bda:	80 91 ee 00 	lds	r24, 0x00EE
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	20 91 fd 00 	lds	r18, 0x00FD
    2be6:	62 2f       	mov	r22, r18
    2be8:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
					while(KEYPAD_get_Value() != 13);
    2bec:	0e 94 05 09 	call	0x120a	; 0x120a <KEYPAD_get_Value>
    2bf0:	8d 30       	cpi	r24, 0x0D	; 13
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <main+0x986>
					SERVO_rotateAngle(ROTATE_ZERO_ANGLE);
    2bf4:	8c e7       	ldi	r24, 0x7C	; 124
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SERVO_rotateAngle>
					servo_angle_value = 0;
    2bfc:	10 92 fd 00 	sts	0x00FD, r1
					eeprom_write_byte(servo_angle_address, servo_angle_value);
    2c00:	80 91 ee 00 	lds	r24, 0x00EE
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	20 91 fd 00 	lds	r18, 0x00FD
    2c0c:	62 2f       	mov	r22, r18
    2c0e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
    2c12:	9e cc       	rjmp	.-1732   	; 0x2550 <main+0x2ea>
		/*if the selected operation is change password*/
		case CHANGE_PASS:
		{
			while(1)
			{
				changePassword();
    2c14:	0e 94 24 11 	call	0x2248	; 0x2248 <changePassword>
				getPassFromMemory();
    2c18:	0e 94 df 10 	call	0x21be	; 0x21be <getPassFromMemory>
				compare(g_password , g_buffer_password );
    2c1c:	82 ef       	ldi	r24, 0xF2	; 242
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	27 ef       	ldi	r18, 0xF7	; 247
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	b9 01       	movw	r22, r18
    2c26:	0e 94 88 10 	call	0x2110	; 0x2110 <compare>

				if(!(confirm_password))
    2c2a:	80 91 fe 00 	lds	r24, 0x00FE
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <main+0x9ce>
    2c32:	10 c1       	rjmp	.+544    	; 0x2e54 <main+0xbee>
				{
					/*to make the user have 3 attempts*/
					ext_buzzerAlarm++;
    2c34:	80 91 ff 00 	lds	r24, 0x00FF
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	80 93 ff 00 	sts	0x00FF, r24

					if(ext_buzzerAlarm == 3)
    2c3e:	80 91 ff 00 	lds	r24, 0x00FF
    2c42:	83 30       	cpi	r24, 0x03	; 3
    2c44:	39 f7       	brne	.-50     	; 0x2c14 <main+0x9ae>
					{
						ext_theaf_flag = 1;
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	80 93 00 01 	sts	0x0100, r24
						LCD_clearScreen();
    2c4c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,3,"A THIEF!!!");
    2c50:	27 eb       	ldi	r18, 0xB7	; 183
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	63 e0       	ldi	r22, 0x03	; 3
    2c58:	a9 01       	movw	r20, r18
    2c5a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayStringRowColumn>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e8       	ldi	r26, 0x80	; 128
    2c64:	bf e3       	ldi	r27, 0x3F	; 63
    2c66:	89 8f       	std	Y+25, r24	; 0x19
    2c68:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a e7       	ldi	r20, 0x7A	; 122
    2c7c:	53 e4       	ldi	r21, 0x43	; 67
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8d 8b       	std	Y+21, r24	; 0x15
    2c88:	9e 8b       	std	Y+22, r25	; 0x16
    2c8a:	af 8b       	std	Y+23, r26	; 0x17
    2c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <main+0xa4a>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8b 8b       	std	Y+19, r24	; 0x13
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <main+0xac8>
	else if (__tmp > 65535)
    2cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <main+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <main+0xaaa>
    2cf2:	89 e1       	ldi	r24, 0x19	; 25
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9a 8b       	std	Y+18, r25	; 0x12
    2cf8:	89 8b       	std	Y+17, r24	; 0x11
    2cfa:	89 89       	ldd	r24, Y+17	; 0x11
    2cfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <main+0xa98>
    2d02:	9a 8b       	std	Y+18, r25	; 0x12
    2d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9c 8b       	std	Y+20, r25	; 0x14
    2d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	8b 89       	ldd	r24, Y+19	; 0x13
    2d12:	9c 89       	ldd	r25, Y+20	; 0x14
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <main+0xa8c>
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <main+0xadc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	98 8d       	ldd	r25, Y+24	; 0x18
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d30:	9c 89       	ldd	r25, Y+20	; 0x14
    2d32:	98 8b       	std	Y+16, r25	; 0x10
    2d34:	8f 87       	std	Y+15, r24	; 0x0f
    2d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d38:	98 89       	ldd	r25, Y+16	; 0x10
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <main+0xad4>
    2d3e:	98 8b       	std	Y+16, r25	; 0x10
    2d40:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1);
						LCD_displayStringRowColumn(1,3,"GO AWAY!!!!");
    2d42:	22 ec       	ldi	r18, 0xC2	; 194
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	63 e0       	ldi	r22, 0x03	; 3
    2d4a:	a9 01       	movw	r20, r18
    2d4c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayStringRowColumn>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a0 e8       	ldi	r26, 0x80	; 128
    2d56:	bf e3       	ldi	r27, 0x3F	; 63
    2d58:	8b 87       	std	Y+11, r24	; 0x0b
    2d5a:	9c 87       	std	Y+12, r25	; 0x0c
    2d5c:	ad 87       	std	Y+13, r26	; 0x0d
    2d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	4a e7       	ldi	r20, 0x7A	; 122
    2d6e:	53 e4       	ldi	r21, 0x43	; 67
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8f 83       	std	Y+7, r24	; 0x07
    2d7a:	98 87       	std	Y+8, r25	; 0x08
    2d7c:	a9 87       	std	Y+9, r26	; 0x09
    2d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d80:	6f 81       	ldd	r22, Y+7	; 0x07
    2d82:	78 85       	ldd	r23, Y+8	; 0x08
    2d84:	89 85       	ldd	r24, Y+9	; 0x09
    2d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e8       	ldi	r20, 0x80	; 128
    2d8e:	5f e3       	ldi	r21, 0x3F	; 63
    2d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d94:	88 23       	and	r24, r24
    2d96:	2c f4       	brge	.+10     	; 0x2da2 <main+0xb3c>
		__ticks = 1;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	3f c0       	rjmp	.+126    	; 0x2e20 <main+0xbba>
	else if (__tmp > 65535)
    2da2:	6f 81       	ldd	r22, Y+7	; 0x07
    2da4:	78 85       	ldd	r23, Y+8	; 0x08
    2da6:	89 85       	ldd	r24, Y+9	; 0x09
    2da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	3f ef       	ldi	r19, 0xFF	; 255
    2dae:	4f e7       	ldi	r20, 0x7F	; 127
    2db0:	57 e4       	ldi	r21, 0x47	; 71
    2db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	4c f5       	brge	.+82     	; 0x2e0c <main+0xba6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e2       	ldi	r20, 0x20	; 32
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	0f c0       	rjmp	.+30     	; 0x2e02 <main+0xb9c>
    2de4:	89 e1       	ldi	r24, 0x19	; 25
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <main+0xb8a>
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	69 f7       	brne	.-38     	; 0x2de4 <main+0xb7e>
    2e0a:	14 c0       	rjmp	.+40     	; 0x2e34 <main+0xbce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <main+0xbc6>
    2e30:	9a 83       	std	Y+2, r25	; 0x02
    2e32:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1);

						TIMER0_init(&timer0);
    2e34:	ce 01       	movw	r24, r28
    2e36:	8e 58       	subi	r24, 0x8E	; 142
    2e38:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <TIMER0_init>
						 Buzzer_ON();
    2e3e:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_ON>
						while(ext_buzzerAlarm != 0); //that zero value will be gotten to that variable by the timers.c file
    2e42:	80 91 ff 00 	lds	r24, 0x00FF
    2e46:	88 23       	and	r24, r24
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <main+0xbdc>
						TIMER0_DEINIT();
    2e4a:	0e 94 18 18 	call	0x3030	; 0x3030 <TIMER0_DEINIT>
						ext_theaf_flag = 0;
    2e4e:	10 92 00 01 	sts	0x0100, r1
    2e52:	7e cb       	rjmp	.-2308   	; 0x2550 <main+0x2ea>
				}

				/*------------- if the entered password is correct ------------*/
				else
				{
					ext_buzzerAlarm = 0;
    2e54:	10 92 ff 00 	sts	0x00FF, r1
					do {
						newPassword();
    2e58:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <newPassword>
						confirmation();
    2e5c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <confirmation>
						compare(g_password , g_buffer_password );
    2e60:	82 ef       	ldi	r24, 0xF2	; 242
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	27 ef       	ldi	r18, 0xF7	; 247
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	b9 01       	movw	r22, r18
    2e6a:	0e 94 88 10 	call	0x2110	; 0x2110 <compare>
					} while (!(confirm_password));
    2e6e:	80 91 fe 00 	lds	r24, 0x00FE
    2e72:	88 23       	and	r24, r24
    2e74:	89 f3       	breq	.-30     	; 0x2e58 <main+0xbf2>
					savePassword();
    2e76:	0e 94 bd 10 	call	0x217a	; 0x217a <savePassword>
    2e7a:	6a cb       	rjmp	.-2348   	; 0x2550 <main+0x2ea>

00002e7c <__vector_9>:

uint8 alarm_close_tick = 0;

extern uint8 ext_buzzerAlarm;      //accumulator for 3 attempts

ISR(TIMER0_OVF_vect){
    2e7c:	1f 92       	push	r1
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	0f 92       	push	r0
    2e84:	11 24       	eor	r1, r1
    2e86:	8f 93       	push	r24
    2e88:	af 93       	push	r26
    2e8a:	bf 93       	push	r27
    2e8c:	ef 93       	push	r30
    2e8e:	ff 93       	push	r31
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
		alarm_close_tick++;
    2e98:	80 91 01 01 	lds	r24, 0x0101
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	80 93 01 01 	sts	0x0101, r24

		/*240 ticks to get 60 seconds*/
		if(alarm_close_tick == 240)
    2ea2:	80 91 01 01 	lds	r24, 0x0101
    2ea6:	80 3f       	cpi	r24, 0xF0	; 240
    2ea8:	59 f4       	brne	.+22     	; 0x2ec0 <__vector_9+0x44>
		{
			CLEAR_BIT(PORTC , PC7);
    2eaa:	a5 e3       	ldi	r26, 0x35	; 53
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e5 e3       	ldi	r30, 0x35	; 53
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	8f 77       	andi	r24, 0x7F	; 127
    2eb6:	8c 93       	st	X, r24
			alarm_close_tick = 0;
    2eb8:	10 92 01 01 	sts	0x0101, r1
			ext_buzzerAlarm = 0;
    2ebc:	10 92 ff 00 	sts	0x00FF, r1
		}
}
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	ff 91       	pop	r31
    2ec6:	ef 91       	pop	r30
    2ec8:	bf 91       	pop	r27
    2eca:	af 91       	pop	r26
    2ecc:	8f 91       	pop	r24
    2ece:	0f 90       	pop	r0
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	0f 90       	pop	r0
    2ed4:	1f 90       	pop	r1
    2ed6:	18 95       	reti

00002ed8 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2ed8:	1f 92       	push	r1
    2eda:	0f 92       	push	r0
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	0f 92       	push	r0
    2ee0:	11 24       	eor	r1, r1
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62

}
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	0f 90       	pop	r0
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	0f 90       	pop	r0
    2ef4:	1f 90       	pop	r1
    2ef6:	18 95       	reti

00002ef8 <TIMER0_init>:
 *3- the ICR0 initial value.
 *4- the required prescaller.
 * [Args]: takes TIMER0_CONFIG.
 * [Returns]: void.
 */
void TIMER0_init(TIMER0_CONFIG *timer0){
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <TIMER0_init+0x6>
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <TIMER0_init+0x8>
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * FOC0 = 0 if the mode isn't PWM mode
	 */
	CLEAR_BIT(TCCR0 , FOC0);
    2f08:	a3 e5       	ldi	r26, 0x53	; 83
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	e3 e5       	ldi	r30, 0x53	; 83
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	8f 77       	andi	r24, 0x7F	; 127
    2f14:	8c 93       	st	X, r24

	switch(timer0 -> timer0Mode){
    2f16:	e9 81       	ldd	r30, Y+1	; 0x01
    2f18:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1a:	80 81       	ld	r24, Z
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	3c 83       	std	Y+4, r19	; 0x04
    2f22:	2b 83       	std	Y+3, r18	; 0x03
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <TIMER0_init+0x40>
    2f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f30:	21 30       	cpi	r18, 0x01	; 1
    2f32:	31 05       	cpc	r19, r1
    2f34:	61 f1       	breq	.+88     	; 0x2f8e <TIMER0_init+0x96>
    2f36:	55 c0       	rjmp	.+170    	; 0x2fe2 <TIMER0_init+0xea>
		 * 1- WGM00 = 0 , WGM01 = 0
		 * 2- COM00 = 0 , COM 01 = 0
		 * 3- clear the compare interrupt enable OCIE = 0
		 * 4- set the overflow interrupt enable TOIE = 1
		 */
		CLEAR_BIT(TCCR0 , WGM00);
    2f38:	a3 e5       	ldi	r26, 0x53	; 83
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e3 e5       	ldi	r30, 0x53	; 83
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	8f 7b       	andi	r24, 0xBF	; 191
    2f44:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , WGM01);
    2f46:	a3 e5       	ldi	r26, 0x53	; 83
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e3 e5       	ldi	r30, 0x53	; 83
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	87 7f       	andi	r24, 0xF7	; 247
    2f52:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM00);
    2f54:	a3 e5       	ldi	r26, 0x53	; 83
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	e3 e5       	ldi	r30, 0x53	; 83
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	8f 7e       	andi	r24, 0xEF	; 239
    2f60:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM01);
    2f62:	a3 e5       	ldi	r26, 0x53	; 83
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e3 e5       	ldi	r30, 0x53	; 83
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8f 7d       	andi	r24, 0xDF	; 223
    2f6e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK , OCIE0);
    2f70:	a9 e5       	ldi	r26, 0x59	; 89
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e9 e5       	ldi	r30, 0x59	; 89
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	8d 7f       	andi	r24, 0xFD	; 253
    2f7c:	8c 93       	st	X, r24
		SET_BIT(TIMSK , TOIE0);
    2f7e:	a9 e5       	ldi	r26, 0x59	; 89
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e9 e5       	ldi	r30, 0x59	; 89
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	81 60       	ori	r24, 0x01	; 1
    2f8a:	8c 93       	st	X, r24
    2f8c:	2a c0       	rjmp	.+84     	; 0x2fe2 <TIMER0_init+0xea>
		 * 1- WGM00 = 0 , WGM01 = 1
		 * 2- COM00 = 0 , COM 01 = 1
		 * 3- set the compare interrupt enable OCIE = 1
		 * 4- clear the overflow interrupt enable TOIE = 0
		 */
		CLEAR_BIT(TCCR0 , WGM00);
    2f8e:	a3 e5       	ldi	r26, 0x53	; 83
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e3 e5       	ldi	r30, 0x53	; 83
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8f 7b       	andi	r24, 0xBF	; 191
    2f9a:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , WGM01);
    2f9c:	a3 e5       	ldi	r26, 0x53	; 83
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e3 e5       	ldi	r30, 0x53	; 83
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	88 60       	ori	r24, 0x08	; 8
    2fa8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM00);
    2faa:	a3 e5       	ldi	r26, 0x53	; 83
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e3 e5       	ldi	r30, 0x53	; 83
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8f 7e       	andi	r24, 0xEF	; 239
    2fb6:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , COM01);
    2fb8:	a3 e5       	ldi	r26, 0x53	; 83
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e3 e5       	ldi	r30, 0x53	; 83
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	80 62       	ori	r24, 0x20	; 32
    2fc4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK , TOIE0);
    2fc6:	a9 e5       	ldi	r26, 0x59	; 89
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 e5       	ldi	r30, 0x59	; 89
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	8e 7f       	andi	r24, 0xFE	; 254
    2fd2:	8c 93       	st	X, r24
		SET_BIT(TIMSK , OCIE0);
    2fd4:	a9 e5       	ldi	r26, 0x59	; 89
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e9 e5       	ldi	r30, 0x59	; 89
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	82 60       	ori	r24, 0x02	; 2
    2fe0:	8c 93       	st	X, r24
		break;
	}

	/*select the prescaler*/
	TCCR0 = ((TCCR0 & 0XF8 ) | ((timer0 -> timer0Prescaler) & 0X07 ));
    2fe2:	a3 e5       	ldi	r26, 0x53	; 83
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e3 e5       	ldi	r30, 0x53	; 83
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	98 2f       	mov	r25, r24
    2fee:	98 7f       	andi	r25, 0xF8	; 248
    2ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff4:	83 81       	ldd	r24, Z+3	; 0x03
    2ff6:	87 70       	andi	r24, 0x07	; 7
    2ff8:	89 2b       	or	r24, r25
    2ffa:	8c 93       	st	X, r24

	/*initiate the TCNT0*/
	TCNT0 = (timer0 -> initialValue);
    2ffc:	a2 e5       	ldi	r26, 0x52	; 82
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e9 81       	ldd	r30, Y+1	; 0x01
    3002:	fa 81       	ldd	r31, Y+2	; 0x02
    3004:	81 81       	ldd	r24, Z+1	; 0x01
    3006:	8c 93       	st	X, r24

	/*initiate the OCR0*/
	OCR0 = (timer0 -> compareValue);
    3008:	ac e5       	ldi	r26, 0x5C	; 92
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	e9 81       	ldd	r30, Y+1	; 0x01
    300e:	fa 81       	ldd	r31, Y+2	; 0x02
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	8c 93       	st	X, r24

	/*enable the global interrupt*/
	SREG |= (1<<7);
    3014:	af e5       	ldi	r26, 0x5F	; 95
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	ef e5       	ldi	r30, 0x5F	; 95
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	80 68       	ori	r24, 0x80	; 128
    3020:	8c 93       	st	X, r24
}
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <TIMER0_DEINIT>:
 * [Function Name]: TIMER0_DEINIT
 * [Description]: to de-initiate the timer0.
 * [Args]: takes void.
 * [Returns]: void.
 */
void TIMER0_DEINIT(void){
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    3038:	e3 e5       	ldi	r30, 0x53	; 83
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	10 82       	st	Z, r1
	TCNT0 = 0;
    303e:	e2 e5       	ldi	r30, 0x52	; 82
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	10 82       	st	Z, r1
	OCR0 = 0;
    3044:	ec e5       	ldi	r30, 0x5C	; 92
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK , OCIE0);
    304a:	a9 e5       	ldi	r26, 0x59	; 89
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e9 e5       	ldi	r30, 0x59	; 89
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	8d 7f       	andi	r24, 0xFD	; 253
    3056:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , TOIE0);
    3058:	a9 e5       	ldi	r26, 0x59	; 89
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e9 e5       	ldi	r30, 0x59	; 89
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	8e 7f       	andi	r24, 0xFE	; 254
    3064:	8c 93       	st	X, r24
}
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <Open_Tap>:
extern uint8 servo_angle_value;
extern uint8 ext_theaf_flag;
extern uint8 servo_angle_address;

void Open_Tap()
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
	// open the tap
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	67 e0       	ldi	r22, 0x07	; 7
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
}
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <Close_Tap>:


void Close_Tap()
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
	// close the tap
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	67 e0       	ldi	r22, 0x07	; 7
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
}
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <Open_Flame>:

void Open_Flame()
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	aa 97       	sbiw	r28, 0x2a	; 42
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
	if(servo_angle_value == 1){ //this condition if the door is opened and waiting to press "*"
    30b0:	80 91 fd 00 	lds	r24, 0x00FD
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	09 f0       	breq	.+2      	; 0x30ba <Open_Flame+0x1e>
    30b8:	75 c0       	rjmp	.+234    	; 0x31a4 <Open_Flame+0x108>
		Buzzer_ON();
    30ba:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_ON>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	a0 e0       	ldi	r26, 0x00	; 0
    30c4:	b0 e4       	ldi	r27, 0x40	; 64
    30c6:	8f a3       	std	Y+39, r24	; 0x27
    30c8:	98 a7       	std	Y+40, r25	; 0x28
    30ca:	a9 a7       	std	Y+41, r26	; 0x29
    30cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ce:	6f a1       	ldd	r22, Y+39	; 0x27
    30d0:	78 a5       	ldd	r23, Y+40	; 0x28
    30d2:	89 a5       	ldd	r24, Y+41	; 0x29
    30d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4a e7       	ldi	r20, 0x7A	; 122
    30dc:	53 e4       	ldi	r21, 0x43	; 67
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	8b a3       	std	Y+35, r24	; 0x23
    30e8:	9c a3       	std	Y+36, r25	; 0x24
    30ea:	ad a3       	std	Y+37, r26	; 0x25
    30ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30ee:	6b a1       	ldd	r22, Y+35	; 0x23
    30f0:	7c a1       	ldd	r23, Y+36	; 0x24
    30f2:	8d a1       	ldd	r24, Y+37	; 0x25
    30f4:	9e a1       	ldd	r25, Y+38	; 0x26
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e8       	ldi	r20, 0x80	; 128
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3102:	88 23       	and	r24, r24
    3104:	2c f4       	brge	.+10     	; 0x3110 <Open_Flame+0x74>
		__ticks = 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9a a3       	std	Y+34, r25	; 0x22
    310c:	89 a3       	std	Y+33, r24	; 0x21
    310e:	3f c0       	rjmp	.+126    	; 0x318e <Open_Flame+0xf2>
	else if (__tmp > 65535)
    3110:	6b a1       	ldd	r22, Y+35	; 0x23
    3112:	7c a1       	ldd	r23, Y+36	; 0x24
    3114:	8d a1       	ldd	r24, Y+37	; 0x25
    3116:	9e a1       	ldd	r25, Y+38	; 0x26
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	4c f5       	brge	.+82     	; 0x317a <Open_Flame+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3128:	6f a1       	ldd	r22, Y+39	; 0x27
    312a:	78 a5       	ldd	r23, Y+40	; 0x28
    312c:	89 a5       	ldd	r24, Y+41	; 0x29
    312e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e2       	ldi	r20, 0x20	; 32
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9a a3       	std	Y+34, r25	; 0x22
    314e:	89 a3       	std	Y+33, r24	; 0x21
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <Open_Flame+0xd4>
    3152:	89 e1       	ldi	r24, 0x19	; 25
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	98 a3       	std	Y+32, r25	; 0x20
    3158:	8f 8f       	std	Y+31, r24	; 0x1f
    315a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    315c:	98 a1       	ldd	r25, Y+32	; 0x20
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <Open_Flame+0xc2>
    3162:	98 a3       	std	Y+32, r25	; 0x20
    3164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3166:	89 a1       	ldd	r24, Y+33	; 0x21
    3168:	9a a1       	ldd	r25, Y+34	; 0x22
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	9a a3       	std	Y+34, r25	; 0x22
    316e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3170:	89 a1       	ldd	r24, Y+33	; 0x21
    3172:	9a a1       	ldd	r25, Y+34	; 0x22
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	69 f7       	brne	.-38     	; 0x3152 <Open_Flame+0xb6>
    3178:	ff c0       	rjmp	.+510    	; 0x3378 <Open_Flame+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317a:	6b a1       	ldd	r22, Y+35	; 0x23
    317c:	7c a1       	ldd	r23, Y+36	; 0x24
    317e:	8d a1       	ldd	r24, Y+37	; 0x25
    3180:	9e a1       	ldd	r25, Y+38	; 0x26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9a a3       	std	Y+34, r25	; 0x22
    318c:	89 a3       	std	Y+33, r24	; 0x21
    318e:	89 a1       	ldd	r24, Y+33	; 0x21
    3190:	9a a1       	ldd	r25, Y+34	; 0x22
    3192:	9e 8f       	std	Y+30, r25	; 0x1e
    3194:	8d 8f       	std	Y+29, r24	; 0x1d
    3196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <Open_Flame+0xfe>
    319e:	9e 8f       	std	Y+30, r25	; 0x1e
    31a0:	8d 8f       	std	Y+29, r24	; 0x1d
    31a2:	ea c0       	rjmp	.+468    	; 0x3378 <Open_Flame+0x2dc>
		_delay_ms(2);
	}else{
		SERVO_rotateAngle(ROTATE_90_ANGLE);
    31a4:	8a ef       	ldi	r24, 0xFA	; 250
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SERVO_rotateAngle>
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	a0 e0       	ldi	r26, 0x00	; 0
    31b2:	b0 e4       	ldi	r27, 0x40	; 64
    31b4:	89 8f       	std	Y+25, r24	; 0x19
    31b6:	9a 8f       	std	Y+26, r25	; 0x1a
    31b8:	ab 8f       	std	Y+27, r26	; 0x1b
    31ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31bc:	69 8d       	ldd	r22, Y+25	; 0x19
    31be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	4a e7       	ldi	r20, 0x7A	; 122
    31ca:	53 e4       	ldi	r21, 0x43	; 67
    31cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8d 8b       	std	Y+21, r24	; 0x15
    31d6:	9e 8b       	std	Y+22, r25	; 0x16
    31d8:	af 8b       	std	Y+23, r26	; 0x17
    31da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31dc:	6d 89       	ldd	r22, Y+21	; 0x15
    31de:	7e 89       	ldd	r23, Y+22	; 0x16
    31e0:	8f 89       	ldd	r24, Y+23	; 0x17
    31e2:	98 8d       	ldd	r25, Y+24	; 0x18
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	5f e3       	ldi	r21, 0x3F	; 63
    31ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	2c f4       	brge	.+10     	; 0x31fe <Open_Flame+0x162>
		__ticks = 1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	9c 8b       	std	Y+20, r25	; 0x14
    31fa:	8b 8b       	std	Y+19, r24	; 0x13
    31fc:	3f c0       	rjmp	.+126    	; 0x327c <Open_Flame+0x1e0>
	else if (__tmp > 65535)
    31fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3200:	7e 89       	ldd	r23, Y+22	; 0x16
    3202:	8f 89       	ldd	r24, Y+23	; 0x17
    3204:	98 8d       	ldd	r25, Y+24	; 0x18
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	3f ef       	ldi	r19, 0xFF	; 255
    320a:	4f e7       	ldi	r20, 0x7F	; 127
    320c:	57 e4       	ldi	r21, 0x47	; 71
    320e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3212:	18 16       	cp	r1, r24
    3214:	4c f5       	brge	.+82     	; 0x3268 <Open_Flame+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3216:	69 8d       	ldd	r22, Y+25	; 0x19
    3218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    321a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e2       	ldi	r20, 0x20	; 32
    3224:	51 e4       	ldi	r21, 0x41	; 65
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	bc 01       	movw	r22, r24
    3230:	cd 01       	movw	r24, r26
    3232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	9c 8b       	std	Y+20, r25	; 0x14
    323c:	8b 8b       	std	Y+19, r24	; 0x13
    323e:	0f c0       	rjmp	.+30     	; 0x325e <Open_Flame+0x1c2>
    3240:	89 e1       	ldi	r24, 0x19	; 25
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	9a 8b       	std	Y+18, r25	; 0x12
    3246:	89 8b       	std	Y+17, r24	; 0x11
    3248:	89 89       	ldd	r24, Y+17	; 0x11
    324a:	9a 89       	ldd	r25, Y+18	; 0x12
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <Open_Flame+0x1b0>
    3250:	9a 8b       	std	Y+18, r25	; 0x12
    3252:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3254:	8b 89       	ldd	r24, Y+19	; 0x13
    3256:	9c 89       	ldd	r25, Y+20	; 0x14
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	9c 8b       	std	Y+20, r25	; 0x14
    325c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325e:	8b 89       	ldd	r24, Y+19	; 0x13
    3260:	9c 89       	ldd	r25, Y+20	; 0x14
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	69 f7       	brne	.-38     	; 0x3240 <Open_Flame+0x1a4>
    3266:	14 c0       	rjmp	.+40     	; 0x3290 <Open_Flame+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3268:	6d 89       	ldd	r22, Y+21	; 0x15
    326a:	7e 89       	ldd	r23, Y+22	; 0x16
    326c:	8f 89       	ldd	r24, Y+23	; 0x17
    326e:	98 8d       	ldd	r25, Y+24	; 0x18
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	9c 8b       	std	Y+20, r25	; 0x14
    327a:	8b 8b       	std	Y+19, r24	; 0x13
    327c:	8b 89       	ldd	r24, Y+19	; 0x13
    327e:	9c 89       	ldd	r25, Y+20	; 0x14
    3280:	98 8b       	std	Y+16, r25	; 0x10
    3282:	8f 87       	std	Y+15, r24	; 0x0f
    3284:	8f 85       	ldd	r24, Y+15	; 0x0f
    3286:	98 89       	ldd	r25, Y+16	; 0x10
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <Open_Flame+0x1ec>
    328c:	98 8b       	std	Y+16, r25	; 0x10
    328e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		Buzzer_ON();
    3290:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_ON>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	a0 e0       	ldi	r26, 0x00	; 0
    329a:	b0 e4       	ldi	r27, 0x40	; 64
    329c:	8b 87       	std	Y+11, r24	; 0x0b
    329e:	9c 87       	std	Y+12, r25	; 0x0c
    32a0:	ad 87       	std	Y+13, r26	; 0x0d
    32a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4a e7       	ldi	r20, 0x7A	; 122
    32b2:	53 e4       	ldi	r21, 0x43	; 67
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	8f 83       	std	Y+7, r24	; 0x07
    32be:	98 87       	std	Y+8, r25	; 0x08
    32c0:	a9 87       	std	Y+9, r26	; 0x09
    32c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	2c f4       	brge	.+10     	; 0x32e6 <Open_Flame+0x24a>
		__ticks = 1;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	9e 83       	std	Y+6, r25	; 0x06
    32e2:	8d 83       	std	Y+5, r24	; 0x05
    32e4:	3f c0       	rjmp	.+126    	; 0x3364 <Open_Flame+0x2c8>
	else if (__tmp > 65535)
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	3f ef       	ldi	r19, 0xFF	; 255
    32f2:	4f e7       	ldi	r20, 0x7F	; 127
    32f4:	57 e4       	ldi	r21, 0x47	; 71
    32f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32fa:	18 16       	cp	r1, r24
    32fc:	4c f5       	brge	.+82     	; 0x3350 <Open_Flame+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3300:	7c 85       	ldd	r23, Y+12	; 0x0c
    3302:	8d 85       	ldd	r24, Y+13	; 0x0d
    3304:	9e 85       	ldd	r25, Y+14	; 0x0e
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e2       	ldi	r20, 0x20	; 32
    330c:	51 e4       	ldi	r21, 0x41	; 65
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	0f c0       	rjmp	.+30     	; 0x3346 <Open_Flame+0x2aa>
    3328:	89 e1       	ldi	r24, 0x19	; 25
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <Open_Flame+0x298>
    3338:	9c 83       	std	Y+4, r25	; 0x04
    333a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	8d 81       	ldd	r24, Y+5	; 0x05
    333e:	9e 81       	ldd	r25, Y+6	; 0x06
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	69 f7       	brne	.-38     	; 0x3328 <Open_Flame+0x28c>
    334e:	14 c0       	rjmp	.+40     	; 0x3378 <Open_Flame+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	9a 81       	ldd	r25, Y+2	; 0x02
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <Open_Flame+0x2d4>
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    3378:	aa 96       	adiw	r28, 0x2a	; 42
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <Close_Flame>:

void Close_Flame()
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	aa 97       	sbiw	r28, 0x2a	; 42
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
	if(servo_angle_value == 1){
    339e:	80 91 fd 00 	lds	r24, 0x00FD
    33a2:	81 30       	cpi	r24, 0x01	; 1
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <Close_Flame+0x1e>
    33a6:	75 c0       	rjmp	.+234    	; 0x3492 <Close_Flame+0x108>
		Buzzer_Off();
    33a8:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_Off>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	a0 e0       	ldi	r26, 0x00	; 0
    33b2:	b0 e4       	ldi	r27, 0x40	; 64
    33b4:	8f a3       	std	Y+39, r24	; 0x27
    33b6:	98 a7       	std	Y+40, r25	; 0x28
    33b8:	a9 a7       	std	Y+41, r26	; 0x29
    33ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33bc:	6f a1       	ldd	r22, Y+39	; 0x27
    33be:	78 a5       	ldd	r23, Y+40	; 0x28
    33c0:	89 a5       	ldd	r24, Y+41	; 0x29
    33c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	4a e7       	ldi	r20, 0x7A	; 122
    33ca:	53 e4       	ldi	r21, 0x43	; 67
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	8b a3       	std	Y+35, r24	; 0x23
    33d6:	9c a3       	std	Y+36, r25	; 0x24
    33d8:	ad a3       	std	Y+37, r26	; 0x25
    33da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33dc:	6b a1       	ldd	r22, Y+35	; 0x23
    33de:	7c a1       	ldd	r23, Y+36	; 0x24
    33e0:	8d a1       	ldd	r24, Y+37	; 0x25
    33e2:	9e a1       	ldd	r25, Y+38	; 0x26
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e8       	ldi	r20, 0x80	; 128
    33ea:	5f e3       	ldi	r21, 0x3F	; 63
    33ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f0:	88 23       	and	r24, r24
    33f2:	2c f4       	brge	.+10     	; 0x33fe <Close_Flame+0x74>
		__ticks = 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
    33fc:	3f c0       	rjmp	.+126    	; 0x347c <Close_Flame+0xf2>
	else if (__tmp > 65535)
    33fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3400:	7c a1       	ldd	r23, Y+36	; 0x24
    3402:	8d a1       	ldd	r24, Y+37	; 0x25
    3404:	9e a1       	ldd	r25, Y+38	; 0x26
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	3f ef       	ldi	r19, 0xFF	; 255
    340a:	4f e7       	ldi	r20, 0x7F	; 127
    340c:	57 e4       	ldi	r21, 0x47	; 71
    340e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3412:	18 16       	cp	r1, r24
    3414:	4c f5       	brge	.+82     	; 0x3468 <Close_Flame+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3416:	6f a1       	ldd	r22, Y+39	; 0x27
    3418:	78 a5       	ldd	r23, Y+40	; 0x28
    341a:	89 a5       	ldd	r24, Y+41	; 0x29
    341c:	9a a5       	ldd	r25, Y+42	; 0x2a
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e2       	ldi	r20, 0x20	; 32
    3424:	51 e4       	ldi	r21, 0x41	; 65
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9a a3       	std	Y+34, r25	; 0x22
    343c:	89 a3       	std	Y+33, r24	; 0x21
    343e:	0f c0       	rjmp	.+30     	; 0x345e <Close_Flame+0xd4>
    3440:	89 e1       	ldi	r24, 0x19	; 25
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	98 a3       	std	Y+32, r25	; 0x20
    3446:	8f 8f       	std	Y+31, r24	; 0x1f
    3448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    344a:	98 a1       	ldd	r25, Y+32	; 0x20
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <Close_Flame+0xc2>
    3450:	98 a3       	std	Y+32, r25	; 0x20
    3452:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3454:	89 a1       	ldd	r24, Y+33	; 0x21
    3456:	9a a1       	ldd	r25, Y+34	; 0x22
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	9a a3       	std	Y+34, r25	; 0x22
    345c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	89 a1       	ldd	r24, Y+33	; 0x21
    3460:	9a a1       	ldd	r25, Y+34	; 0x22
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	69 f7       	brne	.-38     	; 0x3440 <Close_Flame+0xb6>
    3466:	ff c0       	rjmp	.+510    	; 0x3666 <Close_Flame+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3468:	6b a1       	ldd	r22, Y+35	; 0x23
    346a:	7c a1       	ldd	r23, Y+36	; 0x24
    346c:	8d a1       	ldd	r24, Y+37	; 0x25
    346e:	9e a1       	ldd	r25, Y+38	; 0x26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9a a3       	std	Y+34, r25	; 0x22
    347a:	89 a3       	std	Y+33, r24	; 0x21
    347c:	89 a1       	ldd	r24, Y+33	; 0x21
    347e:	9a a1       	ldd	r25, Y+34	; 0x22
    3480:	9e 8f       	std	Y+30, r25	; 0x1e
    3482:	8d 8f       	std	Y+29, r24	; 0x1d
    3484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <Close_Flame+0xfe>
    348c:	9e 8f       	std	Y+30, r25	; 0x1e
    348e:	8d 8f       	std	Y+29, r24	; 0x1d
    3490:	ea c0       	rjmp	.+468    	; 0x3666 <Close_Flame+0x2dc>
		_delay_ms(2);
	}else{
		//GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
		SERVO_rotateAngle(ROTATE_ZERO_ANGLE);
    3492:	8c e7       	ldi	r24, 0x7C	; 124
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SERVO_rotateAngle>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	a0 e0       	ldi	r26, 0x00	; 0
    34a0:	b0 e4       	ldi	r27, 0x40	; 64
    34a2:	89 8f       	std	Y+25, r24	; 0x19
    34a4:	9a 8f       	std	Y+26, r25	; 0x1a
    34a6:	ab 8f       	std	Y+27, r26	; 0x1b
    34a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	69 8d       	ldd	r22, Y+25	; 0x19
    34ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	53 e4       	ldi	r21, 0x43	; 67
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8d 8b       	std	Y+21, r24	; 0x15
    34c4:	9e 8b       	std	Y+22, r25	; 0x16
    34c6:	af 8b       	std	Y+23, r26	; 0x17
    34c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	2c f4       	brge	.+10     	; 0x34ec <Close_Flame+0x162>
		__ticks = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9c 8b       	std	Y+20, r25	; 0x14
    34e8:	8b 8b       	std	Y+19, r24	; 0x13
    34ea:	3f c0       	rjmp	.+126    	; 0x356a <Close_Flame+0x1e0>
	else if (__tmp > 65535)
    34ec:	6d 89       	ldd	r22, Y+21	; 0x15
    34ee:	7e 89       	ldd	r23, Y+22	; 0x16
    34f0:	8f 89       	ldd	r24, Y+23	; 0x17
    34f2:	98 8d       	ldd	r25, Y+24	; 0x18
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	4f e7       	ldi	r20, 0x7F	; 127
    34fa:	57 e4       	ldi	r21, 0x47	; 71
    34fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3500:	18 16       	cp	r1, r24
    3502:	4c f5       	brge	.+82     	; 0x3556 <Close_Flame+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	69 8d       	ldd	r22, Y+25	; 0x19
    3506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e2       	ldi	r20, 0x20	; 32
    3512:	51 e4       	ldi	r21, 0x41	; 65
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9c 8b       	std	Y+20, r25	; 0x14
    352a:	8b 8b       	std	Y+19, r24	; 0x13
    352c:	0f c0       	rjmp	.+30     	; 0x354c <Close_Flame+0x1c2>
    352e:	89 e1       	ldi	r24, 0x19	; 25
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	9a 8b       	std	Y+18, r25	; 0x12
    3534:	89 8b       	std	Y+17, r24	; 0x11
    3536:	89 89       	ldd	r24, Y+17	; 0x11
    3538:	9a 89       	ldd	r25, Y+18	; 0x12
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <Close_Flame+0x1b0>
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	8b 89       	ldd	r24, Y+19	; 0x13
    3544:	9c 89       	ldd	r25, Y+20	; 0x14
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	69 f7       	brne	.-38     	; 0x352e <Close_Flame+0x1a4>
    3554:	14 c0       	rjmp	.+40     	; 0x357e <Close_Flame+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3556:	6d 89       	ldd	r22, Y+21	; 0x15
    3558:	7e 89       	ldd	r23, Y+22	; 0x16
    355a:	8f 89       	ldd	r24, Y+23	; 0x17
    355c:	98 8d       	ldd	r25, Y+24	; 0x18
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9c 8b       	std	Y+20, r25	; 0x14
    3568:	8b 8b       	std	Y+19, r24	; 0x13
    356a:	8b 89       	ldd	r24, Y+19	; 0x13
    356c:	9c 89       	ldd	r25, Y+20	; 0x14
    356e:	98 8b       	std	Y+16, r25	; 0x10
    3570:	8f 87       	std	Y+15, r24	; 0x0f
    3572:	8f 85       	ldd	r24, Y+15	; 0x0f
    3574:	98 89       	ldd	r25, Y+16	; 0x10
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <Close_Flame+0x1ec>
    357a:	98 8b       	std	Y+16, r25	; 0x10
    357c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		Buzzer_Off();
    357e:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_Off>
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	a0 e0       	ldi	r26, 0x00	; 0
    3588:	b0 e4       	ldi	r27, 0x40	; 64
    358a:	8b 87       	std	Y+11, r24	; 0x0b
    358c:	9c 87       	std	Y+12, r25	; 0x0c
    358e:	ad 87       	std	Y+13, r26	; 0x0d
    3590:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3592:	6b 85       	ldd	r22, Y+11	; 0x0b
    3594:	7c 85       	ldd	r23, Y+12	; 0x0c
    3596:	8d 85       	ldd	r24, Y+13	; 0x0d
    3598:	9e 85       	ldd	r25, Y+14	; 0x0e
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	4a e7       	ldi	r20, 0x7A	; 122
    35a0:	53 e4       	ldi	r21, 0x43	; 67
    35a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	8f 83       	std	Y+7, r24	; 0x07
    35ac:	98 87       	std	Y+8, r25	; 0x08
    35ae:	a9 87       	std	Y+9, r26	; 0x09
    35b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b2:	6f 81       	ldd	r22, Y+7	; 0x07
    35b4:	78 85       	ldd	r23, Y+8	; 0x08
    35b6:	89 85       	ldd	r24, Y+9	; 0x09
    35b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e8       	ldi	r20, 0x80	; 128
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c6:	88 23       	and	r24, r24
    35c8:	2c f4       	brge	.+10     	; 0x35d4 <Close_Flame+0x24a>
		__ticks = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
    35d2:	3f c0       	rjmp	.+126    	; 0x3652 <Close_Flame+0x2c8>
	else if (__tmp > 65535)
    35d4:	6f 81       	ldd	r22, Y+7	; 0x07
    35d6:	78 85       	ldd	r23, Y+8	; 0x08
    35d8:	89 85       	ldd	r24, Y+9	; 0x09
    35da:	9a 85       	ldd	r25, Y+10	; 0x0a
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	3f ef       	ldi	r19, 0xFF	; 255
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	57 e4       	ldi	r21, 0x47	; 71
    35e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	4c f5       	brge	.+82     	; 0x363e <Close_Flame+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e2       	ldi	r20, 0x20	; 32
    35fa:	51 e4       	ldi	r21, 0x41	; 65
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	9e 83       	std	Y+6, r25	; 0x06
    3612:	8d 83       	std	Y+5, r24	; 0x05
    3614:	0f c0       	rjmp	.+30     	; 0x3634 <Close_Flame+0x2aa>
    3616:	89 e1       	ldi	r24, 0x19	; 25
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	9c 83       	std	Y+4, r25	; 0x04
    361c:	8b 83       	std	Y+3, r24	; 0x03
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	9c 81       	ldd	r25, Y+4	; 0x04
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <Close_Flame+0x298>
    3626:	9c 83       	std	Y+4, r25	; 0x04
    3628:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	8d 81       	ldd	r24, Y+5	; 0x05
    362c:	9e 81       	ldd	r25, Y+6	; 0x06
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	9e 83       	std	Y+6, r25	; 0x06
    3632:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	9e 81       	ldd	r25, Y+6	; 0x06
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	69 f7       	brne	.-38     	; 0x3616 <Close_Flame+0x28c>
    363c:	14 c0       	rjmp	.+40     	; 0x3666 <Close_Flame+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363e:	6f 81       	ldd	r22, Y+7	; 0x07
    3640:	78 85       	ldd	r23, Y+8	; 0x08
    3642:	89 85       	ldd	r24, Y+9	; 0x09
    3644:	9a 85       	ldd	r25, Y+10	; 0x0a
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	9e 83       	std	Y+6, r25	; 0x06
    3650:	8d 83       	std	Y+5, r24	; 0x05
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	9a 83       	std	Y+2, r25	; 0x02
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <Close_Flame+0x2d4>
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

}
    3666:	aa 96       	adiw	r28, 0x2a	; 42
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	f8 94       	cli
    366c:	de bf       	out	0x3e, r29	; 62
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	cd bf       	out	0x3d, r28	; 61
    3672:	cf 91       	pop	r28
    3674:	df 91       	pop	r29
    3676:	08 95       	ret

00003678 <__vector_4>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 timer2_tick = 0;


ISR(TIMER2_OVF_vect){
    3678:	1f 92       	push	r1
    367a:	0f 92       	push	r0
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	0f 92       	push	r0
    3680:	11 24       	eor	r1, r1
    3682:	2f 93       	push	r18
    3684:	3f 93       	push	r19
    3686:	4f 93       	push	r20
    3688:	5f 93       	push	r21
    368a:	6f 93       	push	r22
    368c:	7f 93       	push	r23
    368e:	8f 93       	push	r24
    3690:	9f 93       	push	r25
    3692:	af 93       	push	r26
    3694:	bf 93       	push	r27
    3696:	ef 93       	push	r30
    3698:	ff 93       	push	r31
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
	timer2_tick ++;
    36a2:	80 91 02 01 	lds	r24, 0x0102
    36a6:	8f 5f       	subi	r24, 0xFF	; 255
    36a8:	80 93 02 01 	sts	0x0102, r24
	if(timer2_tick == 2){
    36ac:	80 91 02 01 	lds	r24, 0x0102
    36b0:	82 30       	cpi	r24, 0x02	; 2
    36b2:	39 f5       	brne	.+78     	; 0x3702 <__vector_4+0x8a>
		//for flame
		if(BIT_IS_SET(PIND , PD2)){
    36b4:	e0 e3       	ldi	r30, 0x30	; 48
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	84 70       	andi	r24, 0x04	; 4
    36c0:	90 70       	andi	r25, 0x00	; 0
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	19 f0       	breq	.+6      	; 0x36cc <__vector_4+0x54>
			Open_Flame();
    36c6:	0e 94 4e 18 	call	0x309c	; 0x309c <Open_Flame>
    36ca:	0b c0       	rjmp	.+22     	; 0x36e2 <__vector_4+0x6a>
		}else{
			if(ext_theaf_flag == 0){
    36cc:	80 91 00 01 	lds	r24, 0x0100
    36d0:	88 23       	and	r24, r24
    36d2:	19 f4       	brne	.+6      	; 0x36da <__vector_4+0x62>
				Close_Flame();
    36d4:	0e 94 c5 19 	call	0x338a	; 0x338a <Close_Flame>
    36d8:	04 c0       	rjmp	.+8      	; 0x36e2 <__vector_4+0x6a>
			}else{
				SERVO_rotateAngle(ROTATE_ZERO_ANGLE);
    36da:	8c e7       	ldi	r24, 0x7C	; 124
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SERVO_rotateAngle>
			}
		}

		//for IR
		if(BIT_IS_SET(PIND , PD3)){
    36e2:	e0 e3       	ldi	r30, 0x30	; 48
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	88 70       	andi	r24, 0x08	; 8
    36ee:	90 70       	andi	r25, 0x00	; 0
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	19 f0       	breq	.+6      	; 0x36fa <__vector_4+0x82>
			Open_Tap();
    36f4:	0e 94 36 18 	call	0x306c	; 0x306c <Open_Tap>
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <__vector_4+0x86>
		}else{
			Close_Tap();
    36fa:	0e 94 42 18 	call	0x3084	; 0x3084 <Close_Tap>
		}

		timer2_tick = 0;
    36fe:	10 92 02 01 	sts	0x0102, r1
	}
}
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	ff 91       	pop	r31
    3708:	ef 91       	pop	r30
    370a:	bf 91       	pop	r27
    370c:	af 91       	pop	r26
    370e:	9f 91       	pop	r25
    3710:	8f 91       	pop	r24
    3712:	7f 91       	pop	r23
    3714:	6f 91       	pop	r22
    3716:	5f 91       	pop	r21
    3718:	4f 91       	pop	r20
    371a:	3f 91       	pop	r19
    371c:	2f 91       	pop	r18
    371e:	0f 90       	pop	r0
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	0f 90       	pop	r0
    3724:	1f 90       	pop	r1
    3726:	18 95       	reti

00003728 <TIMER2_init>:
 *3- the ICR2 initial value.
 *4- the required prescaller.
 * [Args]: takes TIMER0_CONFIG.
 * [Returns]: void.
 */
void TIMER2_init(TIMER2_CONFIG *timer2){
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	00 d0       	rcall	.+0      	; 0x372e <TIMER2_init+0x6>
    372e:	00 d0       	rcall	.+0      	; 0x3730 <TIMER2_init+0x8>
    3730:	00 d0       	rcall	.+0      	; 0x3732 <TIMER2_init+0xa>
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * FOC2 = 0 if the mode isn't PWM mode
	 */
	CLEAR_BIT(TCCR2 , FOC2);
    373a:	a5 e4       	ldi	r26, 0x45	; 69
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e5 e4       	ldi	r30, 0x45	; 69
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	8f 77       	andi	r24, 0x7F	; 127
    3746:	8c 93       	st	X, r24

	switch(timer2 -> timer2Mode){
    3748:	e9 81       	ldd	r30, Y+1	; 0x01
    374a:	fa 81       	ldd	r31, Y+2	; 0x02
    374c:	80 81       	ld	r24, Z
    374e:	28 2f       	mov	r18, r24
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	3e 83       	std	Y+6, r19	; 0x06
    3754:	2d 83       	std	Y+5, r18	; 0x05
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	31 f0       	breq	.+12     	; 0x376a <TIMER2_init+0x42>
    375e:	2d 81       	ldd	r18, Y+5	; 0x05
    3760:	3e 81       	ldd	r19, Y+6	; 0x06
    3762:	21 30       	cpi	r18, 0x01	; 1
    3764:	31 05       	cpc	r19, r1
    3766:	61 f1       	breq	.+88     	; 0x37c0 <TIMER2_init+0x98>
    3768:	55 c0       	rjmp	.+170    	; 0x3814 <TIMER2_init+0xec>
		 * 1- WGM20 = 0 , WGM21 = 0
		 * 2- COM20 = 0 , COM 21 = 0
		 * 3- clear the compare interrupt enable OCIE = 0
		 * 4- set the overflow interrupt enable TOIE = 1
		 */
		CLEAR_BIT(TCCR2 , WGM20);
    376a:	a5 e4       	ldi	r26, 0x45	; 69
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	e5 e4       	ldi	r30, 0x45	; 69
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	8f 7b       	andi	r24, 0xBF	; 191
    3776:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2 , WGM21);
    3778:	a5 e4       	ldi	r26, 0x45	; 69
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	e5 e4       	ldi	r30, 0x45	; 69
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	80 81       	ld	r24, Z
    3782:	87 7f       	andi	r24, 0xF7	; 247
    3784:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2 , COM20);
    3786:	a5 e4       	ldi	r26, 0x45	; 69
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e5 e4       	ldi	r30, 0x45	; 69
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	8f 7e       	andi	r24, 0xEF	; 239
    3792:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2 , COM21);
    3794:	a5 e4       	ldi	r26, 0x45	; 69
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e5 e4       	ldi	r30, 0x45	; 69
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	8f 7d       	andi	r24, 0xDF	; 223
    37a0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK , OCIE2);
    37a2:	a9 e5       	ldi	r26, 0x59	; 89
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e9 e5       	ldi	r30, 0x59	; 89
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	8f 77       	andi	r24, 0x7F	; 127
    37ae:	8c 93       	st	X, r24
		SET_BIT(TIMSK , TOIE2);
    37b0:	a9 e5       	ldi	r26, 0x59	; 89
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	e9 e5       	ldi	r30, 0x59	; 89
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	80 64       	ori	r24, 0x40	; 64
    37bc:	8c 93       	st	X, r24
    37be:	2a c0       	rjmp	.+84     	; 0x3814 <TIMER2_init+0xec>
		 * 1- WGM00 = 0 , WGM01 = 1
		 * 2- COM00 = 0 , COM 01 = 1
		 * 3- set the compare interrupt enable OCIE = 1
		 * 4- clear the overflow interrupt enable TOIE = 0
		 */
		CLEAR_BIT(TCCR0 , WGM20);
    37c0:	a3 e5       	ldi	r26, 0x53	; 83
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e3 e5       	ldi	r30, 0x53	; 83
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	8f 7b       	andi	r24, 0xBF	; 191
    37cc:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , WGM21);
    37ce:	a3 e5       	ldi	r26, 0x53	; 83
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e3 e5       	ldi	r30, 0x53	; 83
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	88 60       	ori	r24, 0x08	; 8
    37da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM20);
    37dc:	a3 e5       	ldi	r26, 0x53	; 83
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e3 e5       	ldi	r30, 0x53	; 83
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	8f 7e       	andi	r24, 0xEF	; 239
    37e8:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , COM21);
    37ea:	a3 e5       	ldi	r26, 0x53	; 83
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	e3 e5       	ldi	r30, 0x53	; 83
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	80 62       	ori	r24, 0x20	; 32
    37f6:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK , TOIE2);
    37f8:	a9 e5       	ldi	r26, 0x59	; 89
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e9 e5       	ldi	r30, 0x59	; 89
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	8f 7b       	andi	r24, 0xBF	; 191
    3804:	8c 93       	st	X, r24
		SET_BIT(TIMSK , OCIE2);
    3806:	a9 e5       	ldi	r26, 0x59	; 89
    3808:	b0 e0       	ldi	r27, 0x00	; 0
    380a:	e9 e5       	ldi	r30, 0x59	; 89
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
    3810:	80 68       	ori	r24, 0x80	; 128
    3812:	8c 93       	st	X, r24
		break;
	}
TCCR2 &= ~(0x07);
    3814:	a5 e4       	ldi	r26, 0x45	; 69
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e5 e4       	ldi	r30, 0x45	; 69
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	88 7f       	andi	r24, 0xF8	; 248
    3820:	8c 93       	st	X, r24

switch(timer2 -> timer2Prescaler){
    3822:	e9 81       	ldd	r30, Y+1	; 0x01
    3824:	fa 81       	ldd	r31, Y+2	; 0x02
    3826:	83 81       	ldd	r24, Z+3	; 0x03
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	3c 83       	std	Y+4, r19	; 0x04
    382e:	2b 83       	std	Y+3, r18	; 0x03
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	9c 81       	ldd	r25, Y+4	; 0x04
    3834:	83 30       	cpi	r24, 0x03	; 3
    3836:	91 05       	cpc	r25, r1
    3838:	09 f4       	brne	.+2      	; 0x383c <TIMER2_init+0x114>
    383a:	40 c0       	rjmp	.+128    	; 0x38bc <TIMER2_init+0x194>
    383c:	2b 81       	ldd	r18, Y+3	; 0x03
    383e:	3c 81       	ldd	r19, Y+4	; 0x04
    3840:	24 30       	cpi	r18, 0x04	; 4
    3842:	31 05       	cpc	r19, r1
    3844:	7c f4       	brge	.+30     	; 0x3864 <TIMER2_init+0x13c>
    3846:	8b 81       	ldd	r24, Y+3	; 0x03
    3848:	9c 81       	ldd	r25, Y+4	; 0x04
    384a:	81 30       	cpi	r24, 0x01	; 1
    384c:	91 05       	cpc	r25, r1
    384e:	31 f1       	breq	.+76     	; 0x389c <TIMER2_init+0x174>
    3850:	2b 81       	ldd	r18, Y+3	; 0x03
    3852:	3c 81       	ldd	r19, Y+4	; 0x04
    3854:	22 30       	cpi	r18, 0x02	; 2
    3856:	31 05       	cpc	r19, r1
    3858:	4c f5       	brge	.+82     	; 0x38ac <TIMER2_init+0x184>
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	b1 f0       	breq	.+44     	; 0x388e <TIMER2_init+0x166>
    3862:	53 c0       	rjmp	.+166    	; 0x390a <TIMER2_init+0x1e2>
    3864:	2b 81       	ldd	r18, Y+3	; 0x03
    3866:	3c 81       	ldd	r19, Y+4	; 0x04
    3868:	25 30       	cpi	r18, 0x05	; 5
    386a:	31 05       	cpc	r19, r1
    386c:	b9 f1       	breq	.+110    	; 0x38dc <TIMER2_init+0x1b4>
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	9c 81       	ldd	r25, Y+4	; 0x04
    3872:	85 30       	cpi	r24, 0x05	; 5
    3874:	91 05       	cpc	r25, r1
    3876:	54 f1       	brlt	.+84     	; 0x38cc <TIMER2_init+0x1a4>
    3878:	2b 81       	ldd	r18, Y+3	; 0x03
    387a:	3c 81       	ldd	r19, Y+4	; 0x04
    387c:	26 30       	cpi	r18, 0x06	; 6
    387e:	31 05       	cpc	r19, r1
    3880:	a9 f1       	breq	.+106    	; 0x38ec <TIMER2_init+0x1c4>
    3882:	8b 81       	ldd	r24, Y+3	; 0x03
    3884:	9c 81       	ldd	r25, Y+4	; 0x04
    3886:	87 30       	cpi	r24, 0x07	; 7
    3888:	91 05       	cpc	r25, r1
    388a:	c1 f1       	breq	.+112    	; 0x38fc <TIMER2_init+0x1d4>
    388c:	3e c0       	rjmp	.+124    	; 0x390a <TIMER2_init+0x1e2>
case NO_CLOCK_2 :
	SET_REG_BITS(TCCR2 , 0X00);
    388e:	e5 e4       	ldi	r30, 0x45	; 69
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	a5 e4       	ldi	r26, 0x45	; 69
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	8c 91       	ld	r24, X
    3898:	80 83       	st	Z, r24
    389a:	37 c0       	rjmp	.+110    	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_1 :
	SET_REG_BITS(TCCR2 , 0X01);
    389c:	a5 e4       	ldi	r26, 0x45	; 69
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e5 e4       	ldi	r30, 0x45	; 69
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	81 60       	ori	r24, 0x01	; 1
    38a8:	8c 93       	st	X, r24
    38aa:	2f c0       	rjmp	.+94     	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_8:
	SET_REG_BITS(TCCR2 , 0X02);
    38ac:	a5 e4       	ldi	r26, 0x45	; 69
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e5 e4       	ldi	r30, 0x45	; 69
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	82 60       	ori	r24, 0x02	; 2
    38b8:	8c 93       	st	X, r24
    38ba:	27 c0       	rjmp	.+78     	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_32:
	SET_REG_BITS(TCCR2 , 0X03);
    38bc:	a5 e4       	ldi	r26, 0x45	; 69
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e5 e4       	ldi	r30, 0x45	; 69
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	83 60       	ori	r24, 0x03	; 3
    38c8:	8c 93       	st	X, r24
    38ca:	1f c0       	rjmp	.+62     	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_64:
	SET_REG_BITS(TCCR2 , 0X04);
    38cc:	a5 e4       	ldi	r26, 0x45	; 69
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	e5 e4       	ldi	r30, 0x45	; 69
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	84 60       	ori	r24, 0x04	; 4
    38d8:	8c 93       	st	X, r24
    38da:	17 c0       	rjmp	.+46     	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_128:
	SET_REG_BITS(TCCR2 , 0X05);
    38dc:	a5 e4       	ldi	r26, 0x45	; 69
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	e5 e4       	ldi	r30, 0x45	; 69
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	85 60       	ori	r24, 0x05	; 5
    38e8:	8c 93       	st	X, r24
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_256:
	SET_REG_BITS(TCCR2 , 0X06);
    38ec:	a5 e4       	ldi	r26, 0x45	; 69
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	e5 e4       	ldi	r30, 0x45	; 69
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	86 60       	ori	r24, 0x06	; 6
    38f8:	8c 93       	st	X, r24
    38fa:	07 c0       	rjmp	.+14     	; 0x390a <TIMER2_init+0x1e2>
	break;

case F_CPU2_1024:
	SET_REG_BITS(TCCR2 , 0X07);
    38fc:	a5 e4       	ldi	r26, 0x45	; 69
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e5 e4       	ldi	r30, 0x45	; 69
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	87 60       	ori	r24, 0x07	; 7
    3908:	8c 93       	st	X, r24
	break;
}

	/*initiate the TCNT0*/
	TCNT2 = (timer2 -> initialValue);
    390a:	a4 e4       	ldi	r26, 0x44	; 68
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e9 81       	ldd	r30, Y+1	; 0x01
    3910:	fa 81       	ldd	r31, Y+2	; 0x02
    3912:	81 81       	ldd	r24, Z+1	; 0x01
    3914:	8c 93       	st	X, r24

	/*initiate the OCR0*/
	OCR2 = (timer2 -> compareValue);
    3916:	a3 e4       	ldi	r26, 0x43	; 67
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	e9 81       	ldd	r30, Y+1	; 0x01
    391c:	fa 81       	ldd	r31, Y+2	; 0x02
    391e:	82 81       	ldd	r24, Z+2	; 0x02
    3920:	8c 93       	st	X, r24

	/*enable the global interrupt*/
	SREG |= (1<<7);
    3922:	af e5       	ldi	r26, 0x5F	; 95
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	ef e5       	ldi	r30, 0x5F	; 95
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	80 68       	ori	r24, 0x80	; 128
    392e:	8c 93       	st	X, r24
}
    3930:	26 96       	adiw	r28, 0x06	; 6
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <TIMER2_DEINIT>:
 * [Function Name]: TIMER0_DEINIT
 * [Description]: to de-initiate the timer0.
 * [Args]: takes void.
 * [Returns]: void.
 */
void TIMER2_DEINIT(void){
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    394a:	e5 e4       	ldi	r30, 0x45	; 69
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	10 82       	st	Z, r1
	TCNT2 = 0;
    3950:	e4 e4       	ldi	r30, 0x44	; 68
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	10 82       	st	Z, r1
	OCR2 = 0;
    3956:	e3 e4       	ldi	r30, 0x43	; 67
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK , TOIE2);
    395c:	a9 e5       	ldi	r26, 0x59	; 89
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e9 e5       	ldi	r30, 0x59	; 89
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8f 7b       	andi	r24, 0xBF	; 191
    3968:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , OCIE2);
    396a:	a9 e5       	ldi	r26, 0x59	; 89
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e9 e5       	ldi	r30, 0x59	; 89
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	8f 77       	andi	r24, 0x7F	; 127
    3976:	8c 93       	st	X, r24
}
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <__vector_11>:
/*******************************************************************************
 *                      ISR Definitions                                  *
 *******************************************************************************/

ISR(USART_RXC_vect)
{
    397e:	1f 92       	push	r1
    3980:	0f 92       	push	r0
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	0f 92       	push	r0
    3986:	11 24       	eor	r1, r1
    3988:	2f 93       	push	r18
    398a:	3f 93       	push	r19
    398c:	4f 93       	push	r20
    398e:	5f 93       	push	r21
    3990:	6f 93       	push	r22
    3992:	7f 93       	push	r23
    3994:	8f 93       	push	r24
    3996:	9f 93       	push	r25
    3998:	af 93       	push	r26
    399a:	bf 93       	push	r27
    399c:	ef 93       	push	r30
    399e:	ff 93       	push	r31
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
	if (UDR == '1'){
    39a8:	ec e2       	ldi	r30, 0x2C	; 44
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	81 33       	cpi	r24, 0x31	; 49
    39b0:	91 f4       	brne	.+36     	; 0x39d6 <__vector_11+0x58>
		/*to open the led of room 1 */
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_HIGH);
    39b2:	83 e0       	ldi	r24, 0x03	; 3
    39b4:	64 e0       	ldi	r22, 0x04	; 4
    39b6:	41 e0       	ldi	r20, 0x01	; 1
    39b8:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
		ext_room1_value = 1;
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	80 93 03 01 	sts	0x0103, r24
		eeprom_write_byte(room1_address, ext_room1_value);
    39c2:	80 91 ef 00 	lds	r24, 0x00EF
    39c6:	88 2f       	mov	r24, r24
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	20 91 03 01 	lds	r18, 0x0103
    39ce:	62 2f       	mov	r22, r18
    39d0:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
    39d4:	42 c0       	rjmp	.+132    	; 0x3a5a <__vector_11+0xdc>
	}else if (UDR == '2'){
    39d6:	ec e2       	ldi	r30, 0x2C	; 44
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	82 33       	cpi	r24, 0x32	; 50
    39de:	89 f4       	brne	.+34     	; 0x3a02 <__vector_11+0x84>
		/*to close the led of room 1 */
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	64 e0       	ldi	r22, 0x04	; 4
    39e4:	40 e0       	ldi	r20, 0x00	; 0
    39e6:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
		ext_room1_value = 0;
    39ea:	10 92 03 01 	sts	0x0103, r1
		eeprom_write_byte(room1_address, ext_room1_value);
    39ee:	80 91 ef 00 	lds	r24, 0x00EF
    39f2:	88 2f       	mov	r24, r24
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	20 91 03 01 	lds	r18, 0x0103
    39fa:	62 2f       	mov	r22, r18
    39fc:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
    3a00:	2c c0       	rjmp	.+88     	; 0x3a5a <__vector_11+0xdc>
	}else if (UDR == '3'){
    3a02:	ec e2       	ldi	r30, 0x2C	; 44
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	83 33       	cpi	r24, 0x33	; 51
    3a0a:	91 f4       	brne	.+36     	; 0x3a30 <__vector_11+0xb2>
		/*to open the led of room 2 */
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    3a0c:	83 e0       	ldi	r24, 0x03	; 3
    3a0e:	66 e0       	ldi	r22, 0x06	; 6
    3a10:	41 e0       	ldi	r20, 0x01	; 1
    3a12:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
		ext_room2_value = 1;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	80 93 04 01 	sts	0x0104, r24
		eeprom_write_byte(room2_address, ext_room2_value);
    3a1c:	80 91 f0 00 	lds	r24, 0x00F0
    3a20:	88 2f       	mov	r24, r24
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	20 91 04 01 	lds	r18, 0x0104
    3a28:	62 2f       	mov	r22, r18
    3a2a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
    3a2e:	15 c0       	rjmp	.+42     	; 0x3a5a <__vector_11+0xdc>
	}else if (UDR == '4'){
    3a30:	ec e2       	ldi	r30, 0x2C	; 44
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	84 33       	cpi	r24, 0x34	; 52
    3a38:	81 f4       	brne	.+32     	; 0x3a5a <__vector_11+0xdc>
		/*to close the led of room 2 */
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    3a3a:	83 e0       	ldi	r24, 0x03	; 3
    3a3c:	66 e0       	ldi	r22, 0x06	; 6
    3a3e:	40 e0       	ldi	r20, 0x00	; 0
    3a40:	0e 94 b2 06 	call	0xd64	; 0xd64 <GPIO_writePin>
		ext_room2_value = 0;
    3a44:	10 92 04 01 	sts	0x0104, r1
		eeprom_write_byte(room2_address, ext_room2_value);
    3a48:	80 91 f0 00 	lds	r24, 0x00F0
    3a4c:	88 2f       	mov	r24, r24
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	20 91 04 01 	lds	r18, 0x0104
    3a54:	62 2f       	mov	r22, r18
    3a56:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m16>
	}
}
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	ff 91       	pop	r31
    3a60:	ef 91       	pop	r30
    3a62:	bf 91       	pop	r27
    3a64:	af 91       	pop	r26
    3a66:	9f 91       	pop	r25
    3a68:	8f 91       	pop	r24
    3a6a:	7f 91       	pop	r23
    3a6c:	6f 91       	pop	r22
    3a6e:	5f 91       	pop	r21
    3a70:	4f 91       	pop	r20
    3a72:	3f 91       	pop	r19
    3a74:	2f 91       	pop	r18
    3a76:	0f 90       	pop	r0
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	0f 90       	pop	r0
    3a7c:	1f 90       	pop	r1
    3a7e:	18 95       	reti

00003a80 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <UART_init+0x6>
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <UART_init+0x8>
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <UART_init+0xa>
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	6b 83       	std	Y+3, r22	; 0x03
    3a90:	7c 83       	std	Y+4, r23	; 0x04
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    3a96:	1a 82       	std	Y+2, r1	; 0x02
    3a98:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3a9a:	eb e2       	ldi	r30, 0x2B	; 43
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	82 e0       	ldi	r24, 0x02	; 2
    3aa0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<RXCIE);
    3aa2:	ea e2       	ldi	r30, 0x2A	; 42
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 e9       	ldi	r24, 0x90	; 144
    3aa8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3aaa:	e0 e4       	ldi	r30, 0x40	; 64
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	86 e8       	ldi	r24, 0x86	; 134
    3ab0:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	ad 81       	ldd	r26, Y+5	; 0x05
    3ab8:	be 81       	ldd	r27, Y+6	; 0x06
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	aa 1f       	adc	r26, r26
    3ac0:	bb 1f       	adc	r27, r27
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	aa 1f       	adc	r26, r26
    3ac8:	bb 1f       	adc	r27, r27
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	9c 01       	movw	r18, r24
    3ad4:	ad 01       	movw	r20, r26
    3ad6:	80 e4       	ldi	r24, 0x40	; 64
    3ad8:	92 e4       	ldi	r25, 0x42	; 66
    3ada:	af e0       	ldi	r26, 0x0F	; 15
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	bc 01       	movw	r22, r24
    3ae0:	cd 01       	movw	r24, r26
    3ae2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    3ae6:	da 01       	movw	r26, r20
    3ae8:	c9 01       	movw	r24, r18
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3af0:	e0 e4       	ldi	r30, 0x40	; 64
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	9a 81       	ldd	r25, Y+2	; 0x02
    3af8:	89 2f       	mov	r24, r25
    3afa:	99 27       	eor	r25, r25
    3afc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3afe:	e9 e2       	ldi	r30, 0x29	; 41
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	80 83       	st	Z, r24
}
    3b06:	26 96       	adiw	r28, 0x06	; 6
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <__udivmodsi4>:
    3b18:	a1 e2       	ldi	r26, 0x21	; 33
    3b1a:	1a 2e       	mov	r1, r26
    3b1c:	aa 1b       	sub	r26, r26
    3b1e:	bb 1b       	sub	r27, r27
    3b20:	fd 01       	movw	r30, r26
    3b22:	0d c0       	rjmp	.+26     	; 0x3b3e <__udivmodsi4_ep>

00003b24 <__udivmodsi4_loop>:
    3b24:	aa 1f       	adc	r26, r26
    3b26:	bb 1f       	adc	r27, r27
    3b28:	ee 1f       	adc	r30, r30
    3b2a:	ff 1f       	adc	r31, r31
    3b2c:	a2 17       	cp	r26, r18
    3b2e:	b3 07       	cpc	r27, r19
    3b30:	e4 07       	cpc	r30, r20
    3b32:	f5 07       	cpc	r31, r21
    3b34:	20 f0       	brcs	.+8      	; 0x3b3e <__udivmodsi4_ep>
    3b36:	a2 1b       	sub	r26, r18
    3b38:	b3 0b       	sbc	r27, r19
    3b3a:	e4 0b       	sbc	r30, r20
    3b3c:	f5 0b       	sbc	r31, r21

00003b3e <__udivmodsi4_ep>:
    3b3e:	66 1f       	adc	r22, r22
    3b40:	77 1f       	adc	r23, r23
    3b42:	88 1f       	adc	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	1a 94       	dec	r1
    3b48:	69 f7       	brne	.-38     	; 0x3b24 <__udivmodsi4_loop>
    3b4a:	60 95       	com	r22
    3b4c:	70 95       	com	r23
    3b4e:	80 95       	com	r24
    3b50:	90 95       	com	r25
    3b52:	9b 01       	movw	r18, r22
    3b54:	ac 01       	movw	r20, r24
    3b56:	bd 01       	movw	r22, r26
    3b58:	cf 01       	movw	r24, r30
    3b5a:	08 95       	ret

00003b5c <__prologue_saves__>:
    3b5c:	2f 92       	push	r2
    3b5e:	3f 92       	push	r3
    3b60:	4f 92       	push	r4
    3b62:	5f 92       	push	r5
    3b64:	6f 92       	push	r6
    3b66:	7f 92       	push	r7
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	ca 1b       	sub	r28, r26
    3b86:	db 0b       	sbc	r29, r27
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	09 94       	ijmp

00003b94 <__epilogue_restores__>:
    3b94:	2a 88       	ldd	r2, Y+18	; 0x12
    3b96:	39 88       	ldd	r3, Y+17	; 0x11
    3b98:	48 88       	ldd	r4, Y+16	; 0x10
    3b9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ba0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ba2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ba4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ba6:	b9 84       	ldd	r11, Y+9	; 0x09
    3ba8:	c8 84       	ldd	r12, Y+8	; 0x08
    3baa:	df 80       	ldd	r13, Y+7	; 0x07
    3bac:	ee 80       	ldd	r14, Y+6	; 0x06
    3bae:	fd 80       	ldd	r15, Y+5	; 0x05
    3bb0:	0c 81       	ldd	r16, Y+4	; 0x04
    3bb2:	1b 81       	ldd	r17, Y+3	; 0x03
    3bb4:	aa 81       	ldd	r26, Y+2	; 0x02
    3bb6:	b9 81       	ldd	r27, Y+1	; 0x01
    3bb8:	ce 0f       	add	r28, r30
    3bba:	d1 1d       	adc	r29, r1
    3bbc:	0f b6       	in	r0, 0x3f	; 63
    3bbe:	f8 94       	cli
    3bc0:	de bf       	out	0x3e, r29	; 62
    3bc2:	0f be       	out	0x3f, r0	; 63
    3bc4:	cd bf       	out	0x3d, r28	; 61
    3bc6:	ed 01       	movw	r28, r26
    3bc8:	08 95       	ret

00003bca <itoa>:
    3bca:	fb 01       	movw	r30, r22
    3bcc:	9f 01       	movw	r18, r30
    3bce:	e8 94       	clt
    3bd0:	42 30       	cpi	r20, 0x02	; 2
    3bd2:	c4 f0       	brlt	.+48     	; 0x3c04 <itoa+0x3a>
    3bd4:	45 32       	cpi	r20, 0x25	; 37
    3bd6:	b4 f4       	brge	.+44     	; 0x3c04 <itoa+0x3a>
    3bd8:	4a 30       	cpi	r20, 0x0A	; 10
    3bda:	29 f4       	brne	.+10     	; 0x3be6 <itoa+0x1c>
    3bdc:	97 fb       	bst	r25, 7
    3bde:	1e f4       	brtc	.+6      	; 0x3be6 <itoa+0x1c>
    3be0:	90 95       	com	r25
    3be2:	81 95       	neg	r24
    3be4:	9f 4f       	sbci	r25, 0xFF	; 255
    3be6:	64 2f       	mov	r22, r20
    3be8:	77 27       	eor	r23, r23
    3bea:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__udivmodhi4>
    3bee:	80 5d       	subi	r24, 0xD0	; 208
    3bf0:	8a 33       	cpi	r24, 0x3A	; 58
    3bf2:	0c f0       	brlt	.+2      	; 0x3bf6 <itoa+0x2c>
    3bf4:	89 5d       	subi	r24, 0xD9	; 217
    3bf6:	81 93       	st	Z+, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	a1 f7       	brne	.-24     	; 0x3be6 <itoa+0x1c>
    3bfe:	16 f4       	brtc	.+4      	; 0x3c04 <itoa+0x3a>
    3c00:	5d e2       	ldi	r21, 0x2D	; 45
    3c02:	51 93       	st	Z+, r21
    3c04:	10 82       	st	Z, r1
    3c06:	c9 01       	movw	r24, r18
    3c08:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <strrev>

00003c0c <__eerd_byte_m16>:
    3c0c:	e1 99       	sbic	0x1c, 1	; 28
    3c0e:	fe cf       	rjmp	.-4      	; 0x3c0c <__eerd_byte_m16>
    3c10:	9f bb       	out	0x1f, r25	; 31
    3c12:	8e bb       	out	0x1e, r24	; 30
    3c14:	e0 9a       	sbi	0x1c, 0	; 28
    3c16:	99 27       	eor	r25, r25
    3c18:	8d b3       	in	r24, 0x1d	; 29
    3c1a:	08 95       	ret

00003c1c <__eewr_byte_m16>:
    3c1c:	26 2f       	mov	r18, r22

00003c1e <__eewr_r18_m16>:
    3c1e:	e1 99       	sbic	0x1c, 1	; 28
    3c20:	fe cf       	rjmp	.-4      	; 0x3c1e <__eewr_r18_m16>
    3c22:	9f bb       	out	0x1f, r25	; 31
    3c24:	8e bb       	out	0x1e, r24	; 30
    3c26:	2d bb       	out	0x1d, r18	; 29
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	e2 9a       	sbi	0x1c, 2	; 28
    3c2e:	e1 9a       	sbi	0x1c, 1	; 28
    3c30:	0f be       	out	0x3f, r0	; 63
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	08 95       	ret

00003c36 <strrev>:
    3c36:	dc 01       	movw	r26, r24
    3c38:	fc 01       	movw	r30, r24
    3c3a:	67 2f       	mov	r22, r23
    3c3c:	71 91       	ld	r23, Z+
    3c3e:	77 23       	and	r23, r23
    3c40:	e1 f7       	brne	.-8      	; 0x3c3a <strrev+0x4>
    3c42:	32 97       	sbiw	r30, 0x02	; 2
    3c44:	04 c0       	rjmp	.+8      	; 0x3c4e <strrev+0x18>
    3c46:	7c 91       	ld	r23, X
    3c48:	6d 93       	st	X+, r22
    3c4a:	70 83       	st	Z, r23
    3c4c:	62 91       	ld	r22, -Z
    3c4e:	ae 17       	cp	r26, r30
    3c50:	bf 07       	cpc	r27, r31
    3c52:	c8 f3       	brcs	.-14     	; 0x3c46 <strrev+0x10>
    3c54:	08 95       	ret

00003c56 <__udivmodhi4>:
    3c56:	aa 1b       	sub	r26, r26
    3c58:	bb 1b       	sub	r27, r27
    3c5a:	51 e1       	ldi	r21, 0x11	; 17
    3c5c:	07 c0       	rjmp	.+14     	; 0x3c6c <__udivmodhi4_ep>

00003c5e <__udivmodhi4_loop>:
    3c5e:	aa 1f       	adc	r26, r26
    3c60:	bb 1f       	adc	r27, r27
    3c62:	a6 17       	cp	r26, r22
    3c64:	b7 07       	cpc	r27, r23
    3c66:	10 f0       	brcs	.+4      	; 0x3c6c <__udivmodhi4_ep>
    3c68:	a6 1b       	sub	r26, r22
    3c6a:	b7 0b       	sbc	r27, r23

00003c6c <__udivmodhi4_ep>:
    3c6c:	88 1f       	adc	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	5a 95       	dec	r21
    3c72:	a9 f7       	brne	.-22     	; 0x3c5e <__udivmodhi4_loop>
    3c74:	80 95       	com	r24
    3c76:	90 95       	com	r25
    3c78:	bc 01       	movw	r22, r24
    3c7a:	cd 01       	movw	r24, r26
    3c7c:	08 95       	ret

00003c7e <_exit>:
    3c7e:	f8 94       	cli

00003c80 <__stop_program>:
    3c80:	ff cf       	rjmp	.-2      	; 0x3c80 <__stop_program>
